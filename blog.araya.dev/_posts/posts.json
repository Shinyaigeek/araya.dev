[
  {
    "2017-06-19-opened-new-blog": {
      "title": "ブログをはてなブログからお引越しした",
      "tags": [
        "雑記",
        "jekyll"
      ],
      "date": "2017-06-19 22:45:21 +0900",
      "category": "",
      "body": "<p><a href=\"http://allajah.hatenablog.com/\">rioRESERVoir</a> というはてなブログで作ったブログを運用してたけど、\njekyll + GitHub Pages での運用に切り替えてみた。</p>\n<p>jekyll + GitHub Pages 以外にも、Wordpress、 Medium、はてなブログ を検討したけど、下記のような理由で今の構成にした。</p>\n<h3 id=\"wordpress\">Wordpress</h3>\n<ul>\n<li>サーバー、インフラの構築およびメンテナンスが必要</li>\n<li>プラグインの管理が辛い</li>\n</ul>\n<h3 id=\"-\">はてなブログ</h3>\n<ul>\n<li>重い(ページのローディングが遅い)</li>\n<li>Hatena Blog Proの価格が高い(月額1008円)</li>\n</ul>\n<h3 id=\"medium\">Medium</h3>\n<ul>\n<li>日本語がかっこよくない</li>\n<li>スタイルシートをカスタマイズできない</li>\n<li>世界各国(日本含む)で行ってたローカライズ等の運営をストップし、HQのあるサンフランシスコに<a href=\"https://medium.com/@MEJapan/from-medium-japan-ad346bee2a9b\">フォーカスした</a></li>\n</ul>\n<p>もちろん、各ブログサービスやプラットフォーム便利な機能は多々あるけど、それを考慮しても今はこのシンプルな構成が自分に合ってるなーと思った。</p>\n<p>GitHub Pagesはホント最高で、サーバーのメンテナンスいらないし無償で運用できるのは本当に良い。感謝しかない 🙏</p>\n<p>CNAME貼って独自ドメイン使えるし、DNS挟めばSSLも貼れるしね。独自ドメイン+httpsで無償運用したい時、DNSは<a href=\"http://qiita.com/superbrothers/items/95e5723e9bd320094537\">CloudFlareを選択するのが良さそう</a>。</p>\n<p>そろそろアウトプットを徐々に増やしていきたい年頃なので、いい感じのペースで書いていきたいと思っております。よろしくお願いします。 🙇</p>\n<h2 id=\"-\">開発秘話</h2>\n<p>このWebサイトのソースコードは<a href=\"https://github.com/Allajah/allajah.github.io\">GitHubで公開しています</a>。</p>\n<p>テーマは <a href=\"https://github.com/muan/scribble\">scribble</a> をカスタマイズして使わさせてもらっています。</p>\n"
    }
  },
  {
    "2017-06-20-gcp-global-meetup": {
      "title": "GCP Global Meetupに参加してきた",
      "tags": [
        "イベントレポート",
        "Google Cloud Platform"
      ],
      "date": "2017-06-20 19:42:53 +0900",
      "category": "",
      "body": "<p>株式会社メルカリさんのオフィスで開催された<a href=\"https://gcpug-tokyo.connpass.com/event/58494/\">GCP Global Meetup</a>に参加してきた。</p>\n<p>今回は基調講演(?)に<a href=\"https://twitter.com/chibichibibr\">Amandaさん</a>のエンジニアのダイバーシティについて、女性エンジニア目線からのトークがあって、\nその影響からか参加者層がどう見ても普段自分が行くような勉強会と違って面白かった。</p>\n<p>メモとってないので、忘れないうちに覚えてる範囲でレポート書いとく。</p>\n<h2 id=\"diversity-in-technology-english-101-by-chibichibibr\">Diversity in technology + English 101 by <a href=\"https://twitter.com/chibichibibr\">@chibichibibr</a></h2>\n<p>Google Developers GroupのAmandaさんのセッション。Amandaさんがなんでソフトウェアデベロッパーになったかとか、\nコミュニティに参加して色んな人に質問するべきとか、デベロッパースピリッツ的な話があってよかった。\n英語で話していたけど綺麗な英語でゆっくり話してくれてたのでめちゃくちゃ聞き取りやすかった。</p>\n<p><img src=\"%7B%7Bsite.url%7D%7D/images/gcp-global-meetup/img1.JPG\" alt=\"\"></p>\n<p>大学でコンピュータ・サイエンス学んでるときに「残念ながら君には向いてない」て言われたけど、\nある教員に「それは彼が勝手にそう思ってるだけであって君には関係ない」と言われ、努力でどうにでもなると気づいた(意訳、資料が公開されたら見てみてください)</p>\n<p>って話はすごい良くて、外からの心理的要因で自分の限界を決めるの絶対やめようと思った。</p>\n<p>あと質疑で、「女性は出産とか妊娠とかですぐやめてしまうから、女性エンジニア取るのやめようかなって上司が言ってる」て話があって、結構衝撃だった。\n性別だけじゃなく、ダイバーシティを受け入れ、推進していく会社で働きたいし、日本のすべての会社がそうあって欲しい。</p>\n<h2 id=\"-\">懇親会</h2>\n<p>メルカリさんの提供で軽食。豪華〜！！</p>\n<p><img src=\"%7B%7Bsite.url%7D%7D/images/gcp-global-meetup/img2.JPG\" alt=\"\"></p>\n<p>メルカリさん、こういうミートアップイベントにここまで力入れられるの本当にすごい。美味しかったです 🙏</p>\n<h2 id=\"api-ai-demo-by-tenntenn\">API.ai demo by  <a href=\"https://twitter.com/tenntenn\">@tenntenn</a></h2>\n<p>tenntennさんによるAPI.aiのデモ。 Slackのintegrationもあるっぽいので、色々と遊べそう。\nAmazon Lexと今度比較して使ってみたい。</p>\n<p>僕もGoogleに買われる直前くらいに触ったことあって、その頃は日本語はまだ全然バカだったんだけど、今もそんなに頭良くないらしく、改善中とのこと。\n英語はかなり頭いいらしいので、現状使うとしたら英語一択になりそう。</p>\n<h2 id=\"image-recognition-at-go-and-cloud-vision-api-by-women-who-go\">image recognition at Go and Cloud vision api by <a href=\"https://womenwhogo-tokyo.connpass.com/\">Women who go</a></h2>\n<p>Women who Go の <a href=\"https://twitter.com/akane_256\">@akane_256</a>さんのセッション。 Googleが提供している画像認識API、 <a href=\"https://cloud.google.com/vision/\">Cloud Vision API</a>のお話。\nCloud Vision APIの主な特徴としては</p>\n<ul>\n<li>GCP上で提供されている</li>\n<li>REST APIに画像認識の機械学習モデルが搭載されている</li>\n<li>例えば、POSTメソッドで画像のURLを渡すと画像を解析した結果が返ってくる</li>\n<li>(人の)感情分析・ランドマークの認識・顔認識などができる</li>\n</ul>\n<p>といったところ。Cloud VisionのWebサイトでテストできるので試してみると面白い。ちなみにgifもいけた。\n<img src=\"%7B%7Bsite.url%7D%7D/images/gcp-global-meetup/img5.jpg\" alt=\"\">\n動くMichelleのgifを入れてみた。感情分析された結果がでてるけど、どれもVery Unlikelyになってるので、このMichelleは機械的にはすごく難しい表情をしている。</p>\n<p><img src=\"%7B%7Bsite.url%7D%7D/images/gcp-global-meetup/img6.jpg\" alt=\"\">\nぽのか先輩はCloudVision的には馬です🐴</p>\n<p>画像認識APIが手軽に使えるのはいいなと思った。\n入力画像が公序良俗に反しないか判別してくれる機能あったらかなり便利かも。</p>\n<p>質疑で面白かったのが、</p>\n<ul>\n<li>Q: 顔認識で、有名人の顔が映ってる画像入力したら、この人は◯◯ですって返してくれる？</li>\n<li>A: 有名人の認識は、顔認識ではなくランドマーク認識で実現できる。有名な建物なんかと同じ扱い。そのため、スティーブ・ジョブズが写ってる画像を入力すると\n「スティーブ・ジョブズが写ってる」というのは教えてくれるが、それが画像中どこに当たるのかまでは教えてくれない。(この回答は登壇者とは別の方)</li>\n</ul>\n<p>とのこと。なんでそういう仕様なんだろう。機械学習・画像認識に詳しい人いたら教えてください。</p>\n<p>Cloud Vision APIは触って遊んでみたいと思った。楽しそう。</p>\n<h2 id=\"google-s-expert-qa-after-google-next\">Google&#39;s expert Q&amp;A after google next</h2>\n<p>Google Developers Expertsの方々によるパネルディスカッション。</p>\n<p>登壇者の方々がどういう経緯でエンジニアになったかとか、初心者にプログラミングをどう教えるかとか、あんまGCPの話しなかったけど、\n前のAPI.aiセッションの質疑とかほぼパネルディスカッションだったしいいよね って感じの、ゆるいテンションで進行されてて大変良かった。\n普段登壇している人にそういう話あんまり聞かないのでおもしろかった。</p>\n<h2 id=\"-\">まとめ</h2>\n<ul>\n<li>GCP、意外と知らないサービスいっぱいあって、結構遊べそう</li>\n<li>インフラ構築しなくてもGAEにシュッとデプロイして一瞬で動かせるってのいいよね。BaaSの強み。</li>\n<li>個人で使ってると一瞬で無料枠使い切りそうなのが悩み</li>\n</ul>\n"
    }
  },
  {
    "2017-06-28-semver-npm": {
      "title": "package.jsonでのセマンティックバージョン指定方法",
      "tags": [
        "node.js",
        "npm",
        "翻訳"
      ],
      "date": "2017-06-28 16:02:11 +0900",
      "category": "",
      "body": "<h1 id=\"-\">はじめに</h1>\n<p>今までpacakge.jsonのバージョン指定をなんとなくやっていたり、<code>npm install --save</code>で記述されるものをそのまま使ってたので、\nちゃんとバージョン指定方法を理解しようと思いました。</p>\n<p>これは<a href=\"https://docs.npmjs.com/misc/semver\">npmの公式ドキュメント</a>の一部を翻訳し、まとめたものです。\n翻訳ミス等が分かり次第、修正しますので、教えていただけると幸いです。\nまた、翻訳に自信がない箇所が数カ所あります。</p>\n<h1 id=\"npm-\">npm で使用するセマンティックバージョン</h1>\n<h2 id=\"-\">バージョン</h2>\n<ul>\n<li>バージョニングは <a href=\"http://semver.org/\">http://semver.org/</a> で説明されている</li>\n<li><code>=</code>および<code>v</code>の2つの文字は取り除かれ、無視させる</li>\n</ul>\n<h2 id=\"-\">レンジ</h2>\n<ul>\n<li><p>バージョンレンジは、レンジを満たすようにバージョンを指定する、comparatorにセットされる</p>\n</li>\n<li><p>comparatorはoperatorとバージョンによって構成される。プリミティブなoperatorとして、</p>\n<ul>\n<li><code>&lt;</code> 未満</li>\n<li><code>&lt;=</code> 以下</li>\n<li><code>&gt;</code> を超える</li>\n<li><code>&gt;=</code> 以上</li>\n<li><code>=</code> 等しい(operatorが指定されてなかった場合は、 <code>=</code>とみなされるため<code>=</code>は必須ではないが、書いたほうが良い)</li>\n</ul>\n<p>がある。</p>\n<p>例えば、comparatorが <code>&gt;=1.2.7</code> だったら、<code>1.2.7</code>、<code>1.2.8</code>、<code>2.5.3</code>、<code>1.3.9</code>、にはマッチするが、<code>1.2.6</code>や<code>1.1.0</code>にはマッチしない。</p>\n<p>複数のcomparatorはスペースによって結合されることで、comparator setを形成し、comparator setは全てのcomparatorが含んでいる交点によって満たされる。</p>\n<p>レンジは<code>||</code>で連結された1つ以上のcomparator setで構成される。バージョンは 、<code>||</code>で分離されたcomparator set のうち最低1つがバージョンによって満たされる場合にのみ、マッチする。</p>\n<p>例えば、<code>&gt;=1.2.7 &lt;1.3.0</code>というcomparator setは<code>1.2.7</code>、<code>1.2.8</code>、<code>1.2.99</code>にはマッチするが、<code>1.2.6</code>、<code>1.3.0</code>、<code>1.1.0</code>、にはマッチしない。</p>\n<p>さらに、<code>1.2.7 || &gt;=1.2.9 &lt;2.0.0</code> というレンジは、<code>1.2.7</code>、<code>1.2.9</code>、<code>1.4.6</code>にはマッチするが、<code>1.2.8</code>、<code>2.0.0</code>にはマッチしない</p>\n</li>\n</ul>\n<h2 id=\"-\">プリリリースタグ</h2>\n<p>バージョンが <code>1.2.3-alpha.3</code> のようにプリリリースタグを持っていた場合、最低1つ以上のcomparatorがプリリリースを持っている[major, minor, patch]タプルと同じ場合のみ、comparator setを満たすことが許される</p>\n<p>例えば、<code>&gt;1.2.3-alpha.3</code>は<code>1.2.3-alpha.7</code>とマッチ可能だが、<code>3.4.5-alpha.9</code>では満たされない。<code>3.4.5-alpha.9</code>が、セマンティックバージョニングで技術的には<code>1.2.3-alpha.7</code>より大きくてもだ。</p>\n<p>このふるまいの意図は2つある。</p>\n<p>1つは、プリリリースバージョンは非常に高頻度でアップデートされ、多数の未だ一般的な消費と合わない破壊的変更を含むことだ。したがって、デフォルトでは、プリリリースバージョンは意味論的なマッチングのレンジからは除外される。</p>\n<p>2つ目として、プリリースバージョンの使用を選んだユーザーはalpha/beta/rc バージョンのセットを使用する意図が明確に示されている。\nレンジにプリリースバージョンタグを含めることで、ユーザーはリスクを認識していることを示している。\nしかし、ユーザーが次のプリリリースバージョンでも同様なリスクを取ることを選択したと改定するには、適切ではない。</p>\n<h2 id=\"-\">応用的なレンジシンタックス</h2>\n<p>応用的レンジシンタックスはプリミティブなcomparatorを決定論的な方法でdesugarする\n応用的なレンジはスペースまたは||を用いたプリミティブcomparatorと同じ方法で結合される</p>\n<h3 id=\"-x-y-z-a-b-c\">ハイフンレンジ X.Y.Z - A.B.C</h3>\n<p>包括的セットを指定\n<code>1.2.3 - 2.3.4 := &gt;=1.2.3 &lt;=2.3.4</code>\n包括的レンジの最初のバージョンとして部分的なバージョンが提供されていたら、省略された部分はゼロに置き換えられる。\n<code>1.2 - 2.3.4 := &gt;=1.2.0 &lt;=2.3.4</code>\n部分的なバージョンが包括的レンジの2つ目の値として与えられていたら、タプルの与えられた部分で始まる全てのバージョンが受け入れられるが、\n提供されたタプルパーツよりも大きくなることはない。\n<code>1.2.3 - 2.3 := &gt;=1.2.3 &lt;2.4.0</code>\n<code>1.2.3 - 2 := &gt;=1.2.3 &lt;3.0.0</code></p>\n<h3 id=\"x-1-2-x-1-x-1-2-\">X-レンジ 1.2.x 1.X 1.2.* *</h3>\n<p><code>X</code>、<code>x</code>、<code>*</code> はいずれもタプルの1つの数値で、「すべての値」を表すのに用いられる。</p>\n<ul>\n<li>* := &gt;=0.0.0 (どんなバージョンでも満たす)</li>\n<li>1.x := &gt;=1.0.0 &lt;2.0.0 (メジャーバージョンが同じものにマッチする)</li>\n<li>1.2.x := &gt;=1.2.0 &lt;1.3.0 (メジャーバージョンとマイナーバージョンが同じものにマッチする)\n部分的バージョンはX-レンジとして扱われるため、特別な文字は事実上オプショナルである。</li>\n<li>&quot;&quot; (空文字) := * := &gt;=0.0.0</li>\n<li>1 := 1.x.x := &gt;=1.0.0 &lt;2.0.0</li>\n<li>1.2 := 1.2.x := &gt;=1.2.0 &lt;1.3.0</li>\n</ul>\n<h3 id=\"-1-2-3-1-2-1\">チルダレンジ ~1.2.3 ~1.2 ~1</h3>\n<p>マイナーバージョンがcomparatorに指定されていた場合、パッチレベルの変更を許容する。</p>\n<ul>\n<li>~1.2.3 := &gt;=1.2.3 &lt;1.(2+1).0 := &gt;=1.2.3 &lt;1.3.0</li>\n<li>~1.2 := &gt;=1.2.0 &lt;1.(2+1).0 := &gt;=1.2.0 &lt;1.3.0 (1.2.xと同じ)</li>\n<li>~1 := &gt;=1.0.0 &lt;(1+1).0.0 := &gt;=1.0.0 &lt;2.0.0 (1.xと同じ)</li>\n<li>~0.2.3 := &gt;=0.2.3 &lt;0.(2+1).0 := &gt;=0.2.3 &lt;0.3.0</li>\n<li>~0.2 := &gt;=0.2.0 &lt;0.(2+1).0 := &gt;=0.2.0 &lt;0.3.0 (0.2.xと同じ)</li>\n<li>~0 := &gt;=0.0.0 &lt;(0+1).0.0 := &gt;=0.0.0 &lt;1.0.0 (0.xと同じ)</li>\n<li>~1.2.3-beta.2 := &gt;=1.2.3-beta.2 &lt;1.3.0 (beta.2以上の1.2.3のプリリースバージョンが許可されることに注意。\n<code>1.2.3-beta.4</code>は許可されるが、<code>1.2.4-beta.2</code>は[major, minor, patch]タプルとマッチしないプリリースのため許可されない。)</li>\n</ul>\n<h3 id=\"-1-2-3-0-2-5-0-0-4\">キャレットレンジ ^1.2.3 ^0.2.5 ^0.0.4</h3>\n<p>[major, minor, patch]タプルの一番左のゼロではない数字を変更しない変更を許可する。\n言い換えると、これはバージョン<code>1.0.0</code>以上ではpatchとminorのアップデートを許容し、<code>0.X &gt;= 0.1.0</code>ではpatchアップデートを許可し、\n<code>0.0.X</code>ではアップデートが行われない。</p>\n<p>多くの作者は<code>x</code>がブレイキングチェンジインディケータであるように<code>0.x</code>バージョンを扱う。\nキャレットレンジは作者が<code>0.2.4</code>で<code>0.3.0</code>でブレイキングチェンジを行うかもしれない場合は理想的であり、一般的な手法である。\nしかし、これは<code>0.2.4</code>と<code>0.2.5</code>の間でブレイキングチェンジがないということを仮定している。\nこれは一般的に観察されているプラクティスによると、(ブレイキングチェンジではない)追加があることが仮定された変更を許可する。</p>\n<ul>\n<li>^1.2.3 := &gt;=1.2.3 &lt;2.0.0</li>\n<li>^0.2.3 := &gt;=0.2.3 &lt;0.3.0</li>\n<li>^0.0.3 := &gt;=0.0.3 &lt;0.0.4</li>\n<li>^1.2.3-beta.2 := &gt;=1.2.3-beta.2 &lt;2.0.0\n<code>1.2.3</code>のプリリースバージョンが<code>beta.2</code>以上の場合許可されることに注意。\nそのため、<code>1.2.3-beta.4</code>は許可されるが、<code>1.2.4-beta.2</code>は許可されない。</li>\n<li>^0.0.3-beta := &gt;=0.0.3-beta &lt;0.0.4\n<code>0.0.3</code>のプリリリースのみが許可されることに注意。つまり、<code>0.0.3-pr.2</code>が許可される。</li>\n</ul>\n<p>キャレットレンジをパースする時、省略された<code>patch</code>の値は<code>0</code>にdesugarするが、majorとminorの値がどちらも0の場合であってもその数値の柔軟性を許容する。</p>\n<ul>\n<li>^1.2.x := &gt;=1.2.0 &lt;2.0.0</li>\n<li>^0.0.x := &gt;=0.0.0 &lt;0.1.0</li>\n<li>^0.0 := &gt;=0.0.0 &lt;0.1.0</li>\n</ul>\n<p>省略された<code>minor</code>と<code>patch</code>の値は0にdesugarするが、majorの値が0であってもそれらの値の中で柔軟性を許容する。</p>\n<ul>\n<li>^1.x := &gt;=1.0.0 &lt;2.0.0</li>\n<li>^0.x := &gt;=0.0.0 &lt;1.0.0</li>\n</ul>\n<h1 id=\"-\">まとめ</h1>\n<ul>\n<li><code>~</code>と<code>^</code> はよく使うけど、意味をちゃんと知らないと意図しないバージョンのパッケージがインストールされてしまうことがあるため注意。</li>\n</ul>\n"
    }
  },
  {
    "2017-07-03-package-json-dependencies": {
      "title": "package.jsonに指定するdependencies, devDependenciesなどの使い方",
      "tags": [],
      "date": "2017-07-03 11:09:31 +0900",
      "category": "",
      "body": "<h2 id=\"dependencies\">dependencies</h2>\n<p>module名をkey、バージョンをvalueとしたObjectで定義する。\n{% highlight json %}\n&quot;dependencies&quot;: {\n  &quot;react&quot;: &quot;^15.6.0&quot;\n  }\n{% endhighlight %}</p>\n<p>tarballやgitのURLも使うことができる。</p>\n<h2 id=\"devdependencies\">devDependencies</h2>\n<p>書き方は<code>dependencies</code>と同じ。ビルドやテスト、ドキュメント作成のためのフレームワークなど、対象となるmoduleの<em>開発</em>に必要な依存関係を記述する。\nあるmoduleをインストールしたとき、そのmoduleにdevDependenciesとして指定されているmoduleは依存関係として解決されない。\nCoffeeScript, TypeScriptなどのAltJSやES最新版をCommonJS向けにコンパイル/トランスパイルする必要があるmoduleの場合は、 <code>scripts.prepare</code> にビルドスクリプトを指定しておくとよい。</p>\n<p>{% highlight json %}\n&quot;devDependencies&quot;: {\n  &quot;coffee-script&quot;: &quot;~1.6.3&quot;\n}\n&quot;scripts&quot;: {\n  &quot;prepare&quot;: &quot;coffee -o lib/ -c src/index.coffee&quot;\n}\n{% endhighlight %}</p>\n<p>これによってnpm registryにpublishされる前に <code>scripts.prepare</code> で指定したコマンドが実行される。</p>\n<h2 id=\"peerdependencies\">peerDependencies</h2>\n<p>書き方は<code>dependencies</code>と同じ。</p>\n<p>対象となるmoduleが特定のmoduleの特定のバージョンに依存している時に使用する。\nタスクランナーのプラグインが、そのタスクランナーの特定のバージョンでしか動作しないときなどに指定する。\npeerDependenciesに指定されているmoduleがプロジェクトにインストールされてない場合警告が出る。</p>\n<p>例えば、webpack-dev-serverはpeerDependencyとして<a href=\"https://github.com/webpack/webpack-dev-server/blob/master/package.json#L7\">webpackを指定している</a>ので、webpack-dev-server単体でインストールしたときには動作せず、npmは警告を出してくれる。</p>\n<p>package.json\n{:.filename}</p>\n<p>{% highlight json %}\n{\n  &quot;name&quot;: &quot;npm-sample&quot;,\n  &quot;dependencies&quot;: {\n    &quot;webpack-dev-server&quot;: &quot;^2.6.1&quot;\n  }\n}\n{% endhighlight %}</p>\n<pre><code>$ npm install\nnpm WARN webpack-dev-server@2.6.1 requires a peer of webpack@^2.2.0 || ^3.0.0 but none was installed.\nnpm WARN webpack-dev-middleware@1.12.0 requires a peer of webpack@^1.0.0 || ^2.0.0 || ^3.0.0 but none was installed.</code></pre><p>peerDependencyのエラーが出た時は指定されているdependencyが解決できるようにしなければならない。</p>\n<p>package.json\n{:.filename}</p>\n<p>{% highlight json %}\n{\n  &quot;name&quot;: &quot;npm-sample&quot;,\n  &quot;dependencies&quot;: {\n    &quot;webpack&quot;: &quot;^3.4.1&quot;,\n    &quot;webpack-dev-server&quot;: &quot;^2.6.1&quot;\n  }\n}\n{% endhighlight %}</p>\n<h2 id=\"bundleddependencies-bundledependencies\">bundledDependencies または bundleDependencies</h2>\n<p>package名を配列で記述する。<br><code>npm pack</code>によりnpm packageをtarball形式で作成し、他のプロジェクトからそのtgzファイルを<code>npm install</code>したときに、bundleDependenciesで指定した依存が解決される。</p>\n<p>/tmp/npm-sample/package.json\n{:.filename}\n{% highlight json %}\n{\n  &quot;name&quot;: &quot;npm-sample&quot;,\n  &quot;version&quot;: &quot;v0.0.0&quot;,\n  &quot;dependencies&quot;: {\n  },\n  &quot;bundledDependencies&quot;: [&quot;colorpack&quot;]\n}\n{% endhighlight %}</p>\n<pre><code>$ npm pack\nnpm-sample-0.0.0.tgz</code></pre><p>/tmp/bundle-sample/package.json\n{:.filename}\n{% highlight json %}\n{\n  &quot;name&quot;: &quot;bundle-sample&quot;,\n  &quot;dependencies&quot;: {\n    &quot;npm-sample&quot;: &quot;file:../npm-sample/npm-sample-0.0.0.tgz&quot;\n  }\n}\n{% endhighlight %}</p>\n<p>/tmp/bundle-sample/package-lock.json\n{:.filename}\n{% highlight json %}\n{\n  &quot;name&quot;: &quot;bundle-sample&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;lockfileVersion&quot;: 1,\n  &quot;requires&quot;: true,\n  &quot;dependencies&quot;: {\n    &quot;colorpack&quot;: {\n      &quot;version&quot;: &quot;0.0.2&quot;,\n      &quot;resolved&quot;: &quot;<a href=\"https://registry.npmjs.org/colorpack/-/colorpack-0.0.2.tgz&quot;\">https://registry.npmjs.org/colorpack/-/colorpack-0.0.2.tgz&quot;</a>\n    },\n    &quot;npm-sample&quot;: {\n      &quot;version&quot;: &quot;file:../npm-sample/npm-sample-0.0.0.tgz&quot;,\n      &quot;requires&quot;: {\n        &quot;colorpack&quot;: &quot;0.0.2&quot;\n      }\n    }\n  }\n}\n{% endhighlight %}</p>\n<p><code>/tmp/npm-sample</code>のpackage.json内でbundledDependenciesとして指定した<code>colorpack</code>が、依存関係として解決されてるのがわかる。</p>\n<h2 id=\"optionaldependencies\">optionalDependencies</h2>\n<p>名前の通り、必須ではないオプショナルなdependencyを指定する。optionalDependencyをコード内で使用する場合、dependencyがインストールされているかを判定する必要がある。\n{% highlight js %}\ntry {\n  var foo = require(&#39;foo&#39;)\n  var fooVersion = require(&#39;foo/package.json&#39;).version\n} catch (er) {\n  foo = null\n}\nif ( notGoodFooVersion(fooVersion) ) {\n  foo = null\n}</p>\n<p>if (foo) {\n  foo.doFooThings()\n}\n{% endhighlight %}</p>\n<h1 id=\"-\">まとめ</h1>\n<p>ライブラリを作る時は<code>dependencies</code>, <code>devDependencies</code>, <code>peerDependencies</code>を使い分ける必要があるけど、製品作る時は全部<code>dependencies</code>もしくは<code>devDependencies</code>にまとめて書いちゃって問題なさそう。\n分かりやすさのためにテストやビルドツールなんかは<code>devDependencies</code>、コード内で使用しているライブラリは<code>dependencies</code>に書いてもいいかなとは思う。</p>\n<p>bundledDependenciesは使いどころがよく分からない 🤔</p>\n"
    }
  },
  {
    "2017-08-06-jekyll-code-highlighting": {
      "title": "jekyll code highlighting",
      "tags": [
        "jekyll"
      ],
      "date": "2017-08-06 21:49:42 +0900",
      "category": "",
      "body": "<p>jekyllでブログ書いてると、<a href=\"https://jekyllrb.com/docs/templates/#code-snippet-highlighting\">code highlighting</a>を確実に使うことになるが、\n対応してる言語やsyntaxがよくわかんなかったので調べた。</p>\n<p>jekyllはcode highlightingに<a href=\"http://rouge.jneen.net/\">Rouge</a>を使用していて、Rougeは<a href=\"http://pygments.org/\">Pygments</a>と完全互換らしいので、\nPygmentsで使えるcode highlightはjekyll上でも使うことができる。</p>\n<p><a href=\"http://pygments.org/languages/\">ここ</a>に載ってる言語はhighlightingが利用できるはず。</p>\n"
    }
  },
  {
    "2017-08-06-newversionsite": {
      "title": "このWebサイトのstyleを書き換えた(v0.3.0)",
      "tags": [
        "Web Front-end",
        "update",
        "雑記"
      ],
      "date": "2017-08-06 01:27:56 +0900",
      "category": "",
      "body": "<p>今まで<a href=\"https://github.com/muan/scribble\">scribble</a>ていうjekyll themeを使ってたんだけど、\nscribbleをベースにstyle書き換えた。\nreset.cssに<a href=\"https://necolas.github.io/normalize.css/\">normalize.css</a>使ってるくらいで、\nほかは全部自分で書くようにした。</p>\n<p><img src=\"%7B%7Bsite.url%7D%7D/images/2017-08-06-newversionsite/compare.jpg\" alt=\"compare\"></p>\n<p>左が古いやつで右が新しいやつ</p>\n<p>テンプレートの数めっちゃ少ないし、シンプルなレイアウト構成にしてるので、<a href=\"https://github.com/Allajah/allajah.github.io/blob/master/_sass/_style.scss\">stylesheetも150行くらい</a>で済んでる。</p>\n<h3 id=\"-\">使用した外部リソース</h3>\n<ul>\n<li><a href=\"http://fontawesome.io/\">Font Awesome</a></li>\n<li><a href=\"https://necolas.github.io/normalize.css/\">normalize.css</a></li>\n<li><a href=\"https://www.google.com/get/noto/\">Noto Sans</a></li>\n</ul>\n"
    }
  },
  {
    "2017-09-25-sayuri-tour-final": {
      "title": "酸欠少女さユりさんのツアーファイナルに参加してきた",
      "tags": [
        "雑記",
        "酸欠少女さユり",
        "ライブ感想"
      ],
      "date": "2017-09-25 17:24:51 +0900",
      "category": "",
      "body": "<p>9/22に赤坂BLITZであった、<a href=\"http://www.sayuri-web.com/\">酸欠少女さユり</a>さん(以下、さユりさん)のツアーファイナル(追加公演)に参加してきました。<br>\nこれは、5月に発売されたファーストアルバム「ミカヅキの航海」のツアーでした。<br>\nめちゃくちゃ最高だったのでそのことを日記に残します。<br>\n(余談だけど、さユりさんのオフィシャルサイト、めっちゃかっこいい)<br></p>\n<h2 id=\"-\">チケット獲得編</h2>\n<p>僕はミカヅキの航海を購入したので、特典としてツアーのチケット先行抽選受付に申し込むことができました。</p>\n<p>複数公演あって第1~3希望まで記入したのですが、全部落選しました。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">今日はsuica落とすしミカヅキの航海抽選落ちた</p>&mdash; あらや (@_araya_) <a href=\"https://twitter.com/_araya_/status/871693911290335233\">2017年6月5日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>結構落ち込みました。このあと一般先行抽選にも応募したんですが落ちました。かなり落ち込みました。</p>\n<p>そのあと２ヶ月くらいして赤坂BLITZでの追加公演が発表されたのでダメ元で応募、奇跡の当選。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">ミカヅキの航海の先行はことごとく外れてるんだけど一応追加公演の最終選考応募したよ。一応ね</p>&mdash; あらや (@_araya_) <a href=\"https://twitter.com/_araya_/status/899261781217951745\">2017年8月20日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">やっっっっっっっっっっっっっっっっっっっっったあああああああああああああああああああああああああああああああああ！！！！！！！！！！！！！！！！ <a href=\"https://t.co/qypuiq9a2f\">pic.twitter.com/qypuiq9a2f</a></p>&mdash; あらや (@_araya_) <a href=\"https://twitter.com/_araya_/status/900292934435721216\">2017年8月23日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>さユりさんのライブに行ける！！！こんなに嬉しいことが他にあるでしょうか。</p>\n<h2 id=\"-\">当日 - 開場前</h2>\n<p>当日の都内は雨でした。小雨とかではなく、傘をささないとビショビショになるくらいの雨。\n普段は雨嫌いなんですが、この日は雨が似合うさユりさんのライブということもあって、すごく穏やかな気持で雨を受け入れていました。</p>\n<p>グッズ販売開始が14:00からで、15:00過ぎに会場に到着しました。\n雨だったせいもあってか、30分くらい並ぶだけで買えたし、全種残ってたので運が良かったかもしれません。\nTシャツ2色買おうかと思ったけど、Tシャツ1色とポンチョを買い、さらに終演後のサイン会に釣られ「ミカヅキの航海初回生産限定盤A」も購入しました。\nCDを買うのは完全に予定外でしたが、僕が発売当初に購入したのは「初回生産限定盤B」で、上位互換品を購入できたので良かったと思っています。</p>\n<p>開場が18:00だったので、それまで近くのスタバで時間を潰しました。</p>\n<p>18:00になって開場待機列に行きましたが、整理番号が結構後ろのほうだったので入場できたのは19時すぎでした。</p>\n<h2 id=\"-\">開幕</h2>\n<p>入場し、15分くらいで開場が真っ暗になりました。</p>\n<p>ガスマスクバンドのみなさんが舞台上に立ち、数秒後にポンチョをきた女性が舞台の中央前へ。</p>\n<p>ステージ前に設置された巨大透明スクリーンに「ミカヅキの航海」という文字が映し出されます。</p>\n<p>『太陽系を抜け出して- 』さユりさんが歌いだして、スクリーンには映像演出。</p>\n<p>その瞬間、全身に鳥肌がたち、感動が溢れてきました。</p>\n<p>とにかく、さユりさんの全力で歌う姿と映像演出のカッコ良さに心奪われました。</p>\n<p>1曲目の『平行線』ですでに涙目だったんですが、<br>\n「次歌う曲は、どうしても忘れられないことがあって、作った曲です。聴いてください。蜂と見世物」<br>\nというさユりさんの言葉のあとの『蜂と見世物』\nには気づいたら涙していました。</p>\n<p>あっという間に全セットリストが終わり、アンコールでの『夜明けの詩』これも最高でした。(さユりさん、普段のライブではアンコールめったにないらしい)</p>\n<p>こんなにライブで世界観に引き込まれ、感情が溢れてくる経験をしたのは初めてでした。</p>\n<h2 id=\"-\">閉幕後</h2>\n<p>終了後、僕はすぐ帰路にはつかずまた列に並んでいました。会場でCDを購入した人だけが参加できるサイン会の列です。</p>\n<p>アーティストのサイン会に参加するとか初めてでしたが、何より間近でさユりさんと目を合わせられることが楽しみで仕方なかったです。</p>\n<p>順番が回ってくる直前はホントドキドキしました。今でも思い出すと胸が高鳴ります。</p>\n<p>「お疲れ様です、こんな感情が溢れてくるライブ初めてでした。最高でした！」と僕が言うと、\n「ほんとうですか、ありがとう。 またお会いしましょうね」しっかりと目を合わせたあと、手を合わせてお辞儀してくださいました。<br>\nさユりさんの目って本当に魅力的で、それこそどこまでも引き込まれていきそうな感覚に陥りました。</p>\n<h2 id=\"-\">帰路</h2>\n<p>電車に揺られながら、さユりさんの曲を聴いて余韻に浸っていました。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">さユりさんのライブの余韻がすごくて家に帰るのが嫌すぎる</p>&mdash; あらや (@_araya_) <a href=\"https://twitter.com/_araya_/status/911217422861864960\">2017年9月22日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<h2 id=\"-\">まとめ</h2>\n<ul>\n<li>ライブめちゃくちゃよかった。次も抽選絶対応募して行く。</li>\n<li>これからどんどんライブの規模感大きくなっていってサイン会とかなくなるだろうし、CD買ってサインしてもらって本当によかった。</li>\n</ul>\n<h2 id=\"-\">一緒に行きましょう</h2>\n<p>身近にさユりさん好きな人がいなくて、1人で行ったんですが、次回は誰かと一緒に行って感動を分かち合いたい。</p>\n<p>ぜひこれを読んでる人はさユりさんの曲を聴いてみてください。そして連絡ください。一緒にライブ行きましょう。</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/o9ol4uGatIg\" frameborder=\"0\" allowfullscreen></iframe>\n\n\n<h2 id=\"-\">買ったグッズたち</h2>\n<p>最後に購入したグッズの写真を載せて終わります。</p>\n<p><img src=\"%7B%7Bsite.url%7D%7D/images/sayuri-tour-final/badge.jpg\" alt=\"badge\">\n<em>缶バッジガチャ。お釣りがちょうど500円だったので回してみた</em></p>\n<p><img src=\"%7B%7Bsite.url%7D%7D/images/sayuri-tour-final/poncho.jpg\" alt=\"poncho\">\n<em>ポンチョ。普段着にしようとは思ってるけどちょっと難易度高い</em></p>\n<p><img src=\"%7B%7Bsite.url%7D%7D/images/sayuri-tour-final/t-shirt.jpg\" alt=\"t-shirt\">\n<em>Tシャツ。黒と白の2色あって、黒にした</em></p>\n<p><img src=\"%7B%7Bsite.url%7D%7D/images/sayuri-tour-final/cd.jpg\" alt=\"cd\">\n<em>ミカヅキの航海 初回生産限定盤A。カバーにサインが入ってる</em></p>\n<h2 id=\"-\">完全に余談</h2>\n<p>雨の中列に並んでいるときとか、電車の中ではKindleで達人プログラマーを読んでいました。<br>\nまだ10%しか読んでないですが、こちらも胸を打たれるいい本なので早めに読破したいと思います。　</p>\n"
    }
  },
  {
    "2017-10-24-npm-v550": {
      "title": "npm v5.5.0の新機能",
      "tags": [
        "npm"
      ],
      "date": "2017-10-24 18:15:01 +0900",
      "category": "",
      "body": "<p>npm v5.5.0が10/4にリリースされました。若干今更感もありますが、v5.5.0で入った新機能について触れたいと思います。</p>\n<p>今回のリリースでプロフィール周りの設定をコマンドラインから行いやすくなりました。　</p>\n<h2 id=\"2-\">2要素認証</h2>\n<p>npmのアカウントに2要素認証を設定できるようになりました。</p>\n<pre><code>npm profile enable-tfa</code></pre><p>で設定できます。npmjs.comのWebサイト内から設定する項目は見つかりませんでした。</p>\n<h2 id=\"-\">トークン管理</h2>\n<p><code>npm token</code>コマンドで、tokenのCreate, List, Updateができるようになりました。\nまた、token作成時に<code>npm token create --read-only</code>と<code>--read-only</code>オプションをつけることで、\n対象tokenを使ってのnpm moduleの更新や新規作成ができなくなります。\nただ、<code>read-only</code>の名の通りプライベートなnpm moduleをダウンロードすることが出来るので、\nCIなどに設定するトークンとして有効です。</p>\n<h2 id=\"-e-\">パスワードの変更とEメールアドレスの設定</h2>\n<p><code>npm profile set password</code> でCLIからパスワードを変更することができるようになりました。</p>\n<p>また、<code>npm profile set email &lt;e-mail address&gt;</code>でメールアドレスを変更できるようになりました。\nEメールアドレスを変更した後は、npmから送られてくるverification mailから、承認する必要があります。</p>\n<h2 id=\"-\">その他プロフィールの変更</h2>\n<p>CLIから、npm profileのTwitterやGitHubなども更新することができるようになりました。\n例えば、Twitterアカウントを変更するには、</p>\n<pre><code>npm profile set twitter _araya_</code></pre><p>とします。</p>\n<h2 id=\"-npm-package-\">スタンドアローンなnpm packageとしても利用可能</h2>\n<p>ここまで紹介した機能は全て<a href=\"https://www.npmjs.com/package/npm-profile\">npm-profile</a>\nでも利用可能です。</p>\n<h2 id=\"-\">まとめ</h2>\n<p>2FA設定できるようになったのは良いですね。\nprivate npm module使ったことないけど、常用してる人にとっては、Read only tokenは便利そうです。</p>\n"
    }
  },
  {
    "2017-10-26-firebase-hosting-jekyll": {
      "title": "Firebase Hostingを使って静的Webサイトを独自ドメインかつSSL証明書付きで公開する",
      "tags": [],
      "date": "2017-10-26 15:41:04 +0900",
      "category": "",
      "body": "<p>ブログのホスティング先をGitHub PagesからFirebase Hostingに変えてみた。</p>\n<h2 id=\"firebase-hosting-\">Firebase Hostingとは</h2>\n<p>その名の通りFirebaseがWebサイトをホスティングしてくれるサービス。</p>\n<p><a href=\"https://firebase.google.com/docs/hosting/\">https://firebase.google.com/docs/hosting/</a></p>\n<p>嬉しいポイントは</p>\n<blockquote>\n<p>Zero-configuration SSL is built into Firebase Hosting so content is always delivered securely.</p>\n</blockquote>\n<p>ここにあって、なんと独自ドメインでもSSLをサポートしてくれる。</p>\n<p><a href=\"https://firebase.google.com/pricing/\">料金</a>も、フリーでそこそこ使えて、ホスティングしてくれるファイルの最大容量は計1GB・\n月10GBまで配信できる。\n個人ブログくらいならフリーで間に合うし、足りなくなっても月$25払えば10GBストア・月50GB配信できるので安くすむ。</p>\n<h2 id=\"firebase-\">Firebaseでのセットアップ</h2>\n<p><a href=\"https://console.firebase.google.com/\">FirebaseのConsole</a>にログインして新規プロジェクトを作成する。</p>\n<h2 id=\"-\">セットアップ</h2>\n<p>Firebase CLIをnpmでインストールする</p>\n<pre><code>npm install -g firebase-tools</code></pre><h2 id=\"firebase-cli-\">Firebase CLIでログインする</h2>\n<pre><code>firebase login</code></pre><p>ブラウザが起動して、Googleアカウントでサインインが求められるのでサインインする。</p>\n<h2 id=\"-\">プロジェクトの設定をする</h2>\n<pre><code>firebase init</code></pre><p>対話型でまずカレントディレクトリを設定する目的を聞いてくる。</p>\n<pre><code>Which Firebase CLI features do you want to setup for this folder?</code></pre><p>ここでは <code>Hosting</code> を選択する。</p>\n<p>次に、設定するFirebaseのプロジェクトを聞いてくるので、さきほど作成したFirebaseプロジェクトを選択する。</p>\n<pre><code>Select a default Firebase project for this directory:</code></pre><p>次に、どのディレクトリをpublic directoryに選択するか聞かれる。\nここに設定したディレクトリがrootとしてFirebaseにデプロイされるので、\nWebサイトの場合は<code>index.html</code>が格納されている、ビルドしたディレクトリ(<code>dist</code>など)を指定する。\njekyllの場合は<code>_site</code>が該当するので、それを指定する。</p>\n<pre><code> What do you want to use as your public directory?</code></pre><p> 次に、プロジェクトをSingle Page Applicationとして設定するか聞いてくる。\n<code>yes</code>にするとURLを全て/index.htmlにリダイレクトさせる。\n今回の場合は<code>NO</code>でいい。</p>\n<pre><code>Configure as a single-page app (rewrite all urls to /index.html)? (y/N)</code></pre><pre><code> Firebase initialization complete!</code></pre><p>ここまで完了すると、<code>.firebaserc</code>と<code>firebase.json</code>が作成される。\nプロジェクトIDや、<code>firebase init</code>で設定した項目を変えたい場合は編集する。</p>\n<h2 id=\"-\">ビルド</h2>\n<p>jekyllの場合は<code>_config.yml</code>の<code>url</code>フィールドを変更する必要がある\nFirebaseのコンソールにアクセスし、projectIDを確認する。\nデプロイ先のURLは<code>https://{project_id}.firebaseapp.com</code>になるので、これを<code>url</code>フィールドに設定する(<code>{project_id}</code>は置き換える)。</p>\n<h2 id=\"-\">デプロイ</h2>\n<pre><code>firebase deploy</code></pre><p>デプロイ完了。Firebase ConsoleのメニューからHostingを選ぶと、ダッシュボードにデプロイ履歴が記載されてる。</p>\n<p>とりあえずここまででFirebaseにWebサイトを公開するところまで完了。</p>\n<h2 id=\"-\">カスタムドメインの設定</h2>\n<p>Firebaseの管理コンソールから、 Hostingを選択して、「ドメインを接続」　ボタンを押して、ウィザードの通りに実行する。\n自分の場合はAWSのRoute 53でポチポチやった。\n流れとしては、</p>\n<ol>\n<li>DNSにTXTレコードを設定して、ドメインの管理者であることを証明</li>\n<li>与えられたIPv4をDNSにAレコードを貼る</li>\n<li>SSL証明書がプロビジョニングされるまで待つ(Firebaseがやってくれる)\nすでにGitHub PagesなどにホスティングしていてCNAMEやAレコードを貼っている場合は、2の前に外しておく。</li>\n</ol>\n<p>ここまででWebサイトをFirebaseにホスティングしてもらい、独自ドメインを使ってさらにHTTPSに対応することができた。</p>\n<h2 id=\"-\">自動デプロイ</h2>\n<p>GitHub Pagesの魅力の一つに、GitHub上のリポジトリにpushしたら自動でデプロイしてくれるというものがあったが、\n今のままの構成だとその恩恵をウケられないのでCIにデプロイしてもらう。今回はCirlceCI 2.0を使う。　</p>\n<h3 id=\"ci-token-\">CI用のtokenの発行</h3>\n<p>firebase CLIでCI用のtokenを発行する</p>\n<pre><code>firebase login:ci</code></pre><p>ブラウザでGoogleサインインすると、tokenが出力されるので控えておく。</p>\n<h3 id=\"circleci-\">CircleCIの設定</h3>\n<p>.circleci/config.ymlを書く\n{% highlight yaml %}\nversion: 2\njobs:\n  build:\n    working_directory: ~/repo\n    docker:</p>\n<pre><code>  - image: circleci/ruby:latest\nsteps:\n  - checkout\n  - run:\n      name: Install firebase-tools\n      command: |\n        curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\n        sudo apt-get install -y nodejs\n        echo prefix=${HOME}/.local &gt;&gt; ~/.npmrc\n        npm install -g firebase-tools\n  - run:\n      name: Install dependencies\n      command: bundle install\n  - run:\n      name: Build\n      command: make build\n  - run:\n      name: Deploy\n      command: ~/.local/bin/firebase deploy --token $FIREBASE_TOKEN</code></pre><p>{% endhighlight %}</p>\n<p>CircleCIのprojectに、さっき取得したCI用tokenを環境変数として指定する。ここでは<code>FIREBASE_TOKEN</code>。</p>\n<p>これでGitHubにpushするとデプロイされるようになった。</p>\n<h2 id=\"-\">まとめ</h2>\n<p>このブログはCircleCI, GitHub, Firebase Hostingに支えられています。</p>\n"
    }
  },
  {
    "2017-12-01-kosen10s-summary-2017": {
      "title": "2017年にあったKosen10'sの動きまとめ",
      "tags": [],
      "date": "2017-12-01 00:00:00 +0900",
      "category": "",
      "body": "<p>この記事は<a href=\"https://adventar.org/calendars/2199\">#kosen10s Advent Calendar 2017</a>\nの1日目の記事です。</p>\n<p>2017年も残すところあと1ヶ月となったので、僕は2017年にKosen10&#39;sであった動きを振り返りたいと思います。</p>\n<h2 id=\"kosen10-s-\">Kosen10&#39;sとは</h2>\n<p>初日なので一応書いておきます。<br>\nKosen10&#39;sとはなにかというと、2010年4月に高専本科に入学した人たちで遊んでいるグループです。\n<a href=\"https://kosen10s.connpass.com/event/69541/\">connpassのイベントページ</a>に掲載\nされている言葉を借りると、</p>\n<blockquote>\n<p>2010年に選択を間違えた人たちでワイワイする</p>\n</blockquote>\n<p>ということだそうです。</p>\n<p>具体的に何をやっているかというと、\nSlackで与太話をしたり、\nたまにLT大会をやったり、ダーツやビリヤード、麻雀などをして遊んだり飲み会をしたりしています。</p>\n<p>Kosen10&#39;sの団体名について、\n<code>Kosen10&#39;s</code>とか<code>kosen10&#39;s</code>とか<code>KOSEN10&#39;s</code>とか<code>kosen10s</code>とかとか色々表記ゆれがありますが、\nなんでも良いので気にしなくて大丈夫です。</p>\n<p>読み方は「こーせんてんず」です。 縮めて、「てんず」とか言ったりします。</p>\n<h2 id=\"what-s-new-in-2017\">What&#39;s new in 2017</h2>\n<p>前置きの紹介も一通り終わったので、アドベントカレンダー1日目の本題に移ろうと思います。</p>\n<p>2017年1月から2017年11月にKosen&#39;10sであった新しい動きやイベントを、以下の項目について振り返ろうと思います。</p>\n<ul>\n<li>イベント</li>\n<li>Slack channel</li>\n<li>emoji</li>\n</ul>\n<h3 id=\"-\">イベント</h3>\n<p><a href=\"https://kosen10s.connpass.com/\">connpassのイベント一覧</a>からスクショを撮ってきました。</p>\n<p><img src=\"%7B%7Bsite.url%7D%7D/images/2017-11-28-kosen10s-summary-2017/s.png\" alt=\"\">{:class=&quot;full-size-image&quot;}</p>\n<p>LT、花見、ダーツ・ビリヤード、バドミントン、3周年パーティと結構色々やっています。\nこの他にもConnpassは立ててないけど集まって遊んだりしているので、月一以上のペースで何かしら活動が行われていると思います。</p>\n<h3 id=\"slack-channel\">Slack channel</h3>\n<p><a href=\"https://api.slack.com\">Slack API</a>を駆使して、2017年内に作られたSlack channelを見てみます。</p>\n<p>Slackの<code>channels.list</code>と<code>users.profile.get</code>を駆使して、2017年に作られたchannelと作者をリストにしたものがこちらです。</p>\n<pre><code>Channel Name: #___\nCreated by: allajah\nCreated at: 2017/3/17\nPurpose:\nTopic:\n\nChannel Name: #3rd-anniversary\nCreated by: denari\nCreated at: 2017/9/23\nPurpose: kosen10s(さんさい)\nTopic: &lt;http://kosen10s.net/3rd-anniversary/|kosen10s.net/3rd-anniversary/&gt;\n\nChannel Name: #badminton\nCreated by: denari\nCreated at: 2017/5/29\nPurpose: する。一時的なchannelのつもりだけど、運動系全体channelにして長期運用もアリ\nTopic: &lt;https://kosen10s.connpass.com/event/69887/&gt;\n\nChannel Name: #board-game\nCreated by: tsudukami\nCreated at: 2017/6/28\nPurpose: 非電源ゲームを楽しむ\nTopic:\n\nChannel Name: #datz-botch\nCreated by: denari\nCreated at: 2017/3/24\nPurpose: ふとした時に 「ぼっち」 を回避するため、各位に「今日飯イケる人〜」みたいなのを聞くchannel(試験運用)\nTopic:\n\nChannel Name: #dtm部\nCreated by: unasuke\nCreated at: 2017/8/8\nPurpose: 部活\nTopic:\n\nChannel Name: #freelance\nCreated by: c-bata\nCreated at: 2017/9/30\nPurpose:\nTopic:\n\nChannel Name: #game\nCreated by: allajah\nCreated at: 2017/7/20\nPurpose:\nTopic:\n\nChannel Name: #gender\nCreated by: tsudukami\nCreated at: 2017/2/21\nPurpose:\nTopic:\n\nChannel Name: #golang\nCreated by: allajah\nCreated at: 2017/1/2\nPurpose: We love go-gopher &amp;lt;3\nTopic: :golang:\n\nChannel Name: #heya\nCreated by:\nCreated at: 2017/1/7\nPurpose: 部屋\nTopic:\n\nChannel Name: #kusa\nCreated by: puhitaku\nCreated at: 2017/6/28\nPurpose: :kusa: 生やしたらこちらへ流しましょう。\nTopic: :kusa:\n\nChannel Name: #lt08\nCreated by: denari\nCreated at: 2017/6/5\nPurpose: 7月\nTopic: https://kosen10s.connpass.com/event/62398/\n\nChannel Name: #lt09\nCreated by: sakasin\nCreated at: 2017/7/31\nPurpose:\nTopic: 日程調整\n\nChannel Name: #lt10\nCreated by: allajah\nCreated at: 2017/10/12\nPurpose: 3周年記念 :tada:\nTopic:\n\nChannel Name: #pool\nCreated by: zero\nCreated at: 2017/1/27\nPurpose:\nTopic: :zero_: pool is a place that people play billiards.\n\nChannel Name: #うどん\nCreated by: denari\nCreated at: 2017/4/17\nPurpose: 思い立ったが吉日。うどん県でうどん食う。時期すら未定\nTopic: 時期を決めるだけの決定材料を探そう！\n\nChannel Name: #おしゃれスポーツ\nCreated by: denari\nCreated at: 2017/3/20\nPurpose: :darts: :eight_ball:\nTopic: おしゃれスポーツダサい問題\n\nChannel Name: #お花見\nCreated by: denari\nCreated at: 2017/3/22\nPurpose: OHANAMI\nTopic: 4/9開催 任意のN次会について飯田橋駅にて集合\n\nChannel Name: #ジャパリパーク\nCreated by: allajah\nCreated at: 2017/3/17\nPurpose: Welcome to ようこそ ジャパリパーク！\nTopic:\n\nChannel Name: #てすと\nCreated by:\nCreated at: 2017/3/17\nPurpose:\nTopic:\n\nChannel Name: #どうぶつの森ポケットキャンプ\nCreated by: denari\nCreated at: 2017/11/25\nPurpose: 使い道ないけどともかく作った。IDを置いておく場所になりそう\nTopic:\n\nChannel Name: #秋吉会\nCreated by: unasuke\nCreated at: 2017/7/16\nPurpose: 秋吉に行く\nTopic:\n\nChannel Name: #麻雀\nCreated by: allajah\nCreated at: 2017/10/9\nPurpose: :mahjong:  初心者・これから始めたい人歓迎\nTopic:</code></pre><p>実に24ものchannelが2017年中に作られていることがわかりますね。\n作成者はdenariが多いみたいです。</p>\n<p>今年の3月頃に日本語名のChannelが作成できるようになったので、いくつか日本語名のChannelもあります。<br>\n今生き残ってるもので最初に作られたのは<code>#ジャパリパーク</code>channelです。</p>\n<p>僕が3/17に<code>#___</code>なるChannelを作ってるみたいですが、全く記憶にありません。</p>\n<p>また、この記事を書いた直後に自らの手で<code>#job</code>channelを追加したので、2017年に作られたchannelは25になりました。</p>\n<h3 id=\"emoji\">emoji</h3>\n<p>Kosen10sのSlackといえばemojiの数が尋常ではないと内輪でよく話題になります。</p>\n<p><img src=\"%7B%7Bsite.url%7D%7D/images/2017-11-28-kosen10s-summary-2017/e.png\" alt=\"\">{:class=&quot;full-size-image&quot;}</p>\n<p>aliasも含めると750あるみたいです。</p>\n<p>試したら、残念ながら Slack APIではemojiの作成日が取得できなかったため、2017年に追加されたemojiをリスト化することはできませんでした。\n(おそらく、<code>#emoji</code> channelのログを漁れば分かると思うので誰かやってくれるかも...)</p>\n<p>emoji関連で大きな動きといえば、最近日本語でもemojiが登録できるようになったので、こんなことになっています。</p>\n<p><img src=\"%7B%7Bsite.url%7D%7D/images/2017-11-28-kosen10s-summary-2017/e2.png\" alt=\"\">{:class=&quot;full-size-image&quot;}</p>\n<p>ぽのか先輩の別称がわかって便利ですね。</p>\n<p>最近はA~Zのアルファベットを全部企業やサービスのロゴで埋めようという動きもあって、 <code>#emoji</code> channelの動向は要チェックです。</p>\n<p>ちなみに、こんな話もあります。</p>\n<blockquote class=\"twitter-tweet\" data-partner=\"tweetdeck\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://twitter.com/hashtag/kosen10s?src=hash&amp;ref_src=twsrc%5Etfw\">#kosen10s</a> に麻雀部ができたら牌全種のemojiを追加することを宣言します</p>&mdash; あらや (@_araya_) <a href=\"https://twitter.com/_araya_/status/917389997686251522?ref_src=twsrc%5Etfw\">October 9, 2017</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n\n<h2 id=\"-\">まとめ</h2>\n<p>こんな雰囲気で、Kosen10&#39;sはゆるく楽しく遊んでいます。\n2010年に高専入学していて、僕達と遊んでくれる人がいたらぜひ<a href=\"https://kosen10s-invite.herokuapp.com/\">Slackに参加</a>してください！</p>\n<p>明日は<a href=\"https://twitter.com/puhitaku\">@puhitaku</a>の記事です。</p>\n<p><a href=\"https://adventar.org/calendars/2199\">#kosen10s Advent Calendar 2017</a>\nは参加者の80%くらいが何を書くのか全くわからないので、当日まで目が離せません :eyes:</p>\n"
    }
  },
  {
    "2017-12-02-f-to-h": {
      "title": "フラー株式会社を退職し、合同会社ヘマタイトに入社しました",
      "tags": [
        "雑記",
        "転職"
      ],
      "date": "2017-12-02 00:00:00 +0900",
      "category": "",
      "body": "<p>この記事は<a href=\"https://adventar.org/calendars/2158\">退職者 Advent Calendar 2017</a>の2日目の記事です。</p>\n<h2 id=\"-\">前置き</h2>\n<p>2017年9月30日に、<a href=\"https://fuller-inc.com\">フラー株式会社</a>を退職しました。\nフラーに入社したのが2015年10月半ばで、その前も1ヶ月ほどインターンをしていたので、\n2年ほどお世話になっていました。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">フラー株式会社での最終出勤日を終えました。<br>退職エントリーは後ほど <a href=\"https://t.co/Y5C6slYICS\">pic.twitter.com/Y5C6slYICS</a></p>&mdash; あらや (@_araya_) <a href=\"https://twitter.com/_araya_/status/908626234342465537?ref_src=twsrc%5Etfw\">2017年9月15日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>翌日、10月1日に<a href=\"https://fe2o3.jp\">合同会社ヘマタイト</a>に入社し、現在楽しく働いています。</p>\n<p>退職エントリを書き途中で長らく放置していたのですが、\nちょうど退職者Advent Calendarが目に留まりこれは良いと思って即参加登録しました。</p>\n<h2 id=\"-\">フラーでやっていたこと</h2>\n<p>フラーでは主にWebフロントエンドを担当していて、同社が展開している<a href=\"https://appa.pe/\">App Ape</a>\nの開発に携わったり、\nグロースハック的なもので色々なLandingPageを作るなどしました。</p>\n<p>たまに、サーバーサイドやAndroidなんかもやりましたが、7割以上Webフロントをやっていたんじゃないかと思います。</p>\n<h2 id=\"-fuller-\">なぜフラー(FULLER)に入ったか</h2>\n<p>FULLERと出会ったのは高専時代にFULLERのCEOが学校に講演に来たのがきっかけでした。\nFULLERのようなベンチャー企業との出会いは学校に閉じこもっていた僕にとってかなりの衝撃で、\nそれからベンチャーで働くことに興味を持ち、FULLERという存在が憧れになりました。</p>\n<p>それから3年ほど経ち、高専専攻科に在学中の夏休みにFULLERでインターン、\nその直後に専攻科を休学し入社しました。(同年度3月に退学しています。)</p>\n<p>FULLERに入った決め手はシンプルで、「めっちゃワクワクしたから」というのが最大でした。<br>\n今思うと決め手に若さを感じます。<br>\nインターンしているとき、<strong>これからFULLERはどんどん成長していきクールな製品を\n世の中に生み出していく</strong> ということを確信していた僕は、FULLERという会社に心を奪われ、入社を決意しました。</p>\n<p>学校を休学してFULLERに入るという決断をしたとき、応援してくれた研究室の先生方や両親に今でもとても感謝しています。頭が上がりません。  :bow:</p>\n<h2 id=\"fuller-\">FULLERに入社してから</h2>\n<p>入社後すぐにアメリカでの開発合宿に連れていってもらったり、\nその直後にそこそこの規模の新プロジェクトにアサインされたり、\n入社後1ヶ月後にはすでに最前線で戦っていました。<br>\nCEOやCTOは「戦いの中でしか成長できない」ということを言っていて、\nこれは今でも僕のマインドセットのコアになっています。</p>\n<p>僕が入社した頃、FULLERは創業4年を迎えようとしていて、20人くらいの会社でした。<br>\nそれから5周年を迎え、<a href=\"https://5th.fuller-inc.com/\">会社名をフラー株式会社に改め、ロゴも新しくなりました</a>。<br>\nそれからさらに1年後、僕が退社するころには社員数は50人ほどになっていました。<br>\nフラーという会社や、そのサービスが大きくなっていく過程を自分自身で感じることができた経験は大きかったと思っています。</p>\n<p>フラーは5周年を迎えたときに、「フラーメンバーの心得」という、行動規範のものを作っていて、\n「フラーの良さ」がそこに凝縮されいます。<br>\nその中の1つの項目が今も僕の心に強く焼き付いていて、座右の銘を聞かれたらこれを答えます。</p>\n<blockquote>\n<p>本当に迷ったら、楽しい方を選べ。</p>\n</blockquote>\n<h2 id=\"-\">転職</h2>\n<p>フラーで働き始めて1年半ほど経った頃、他の事業や技術に挑戦したくなってきました。<br>\nそれとは別に、単純にお金を稼ぎたかったので、2017年の3月から、以前から知り合いだった\n<a href=\"https://twitter.com/umisama\">@umisama</a>がやっているヘマタイトという会社で、\nパートタイム契約で副業を始めました。<br>\n転職活動を始めたのはそれから2ヶ月くらい後のことで、いくつかの会社の人事の方々とお話させていただきましたが、最終的にヘマタイトに正社員として入社することに決めました。</p>\n<p>最大の決め手となったのは、リモート・フルフレックスタイムで働けるという点でした。<br>\nこの働き方はフラーにいるときからやってみたかったことで、現在はこの制度を最大限いかして仕事しています。<br></p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">転職して業務開始1日目なんですが、「自宅でけものフレンズをスピーカーとサブディスプレイで垂れ流しながら仕事できる職場、最高かよ」ってなってます</p>&mdash; あらや (@_araya_) <a href=\"https://twitter.com/_araya_/status/914720135541178368?ref_src=twsrc%5Etfw\">2017年10月2日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>リモート・フルフレックスで働いてみての所感は今度またブログに書きたいと思います。</p>\n<p>最初の会社に入るときも、今回の転職も、<code>履歴書・職務経歴書 -&gt; 面接</code>といった採用フローをまともに\n受けてないので、もし次があったらそういうのも経験したいなと思います。</p>\n<h2 id=\"-\">退職直前にやったこと</h2>\n<p>プロジェクト的には、機能開発のほうからフェードアウトし、\nフレームワークのバージョンをあげたり、lintをちゃんと回すようにしたり、CIまわりを整備したりしていました。</p>\n<p>あとは、フラーメンバーに対して、「これだけは絶対にやるべき」というあることをプレゼンしたり、\n退職日に社内ドキュメント共有ツールにポエムを投稿したりしました。</p>\n<p>なお、このポエムは1ヶ月後抹消することに成功しています。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">前職を退職する直前にQiita::Teamに投稿したポエム、そろそろ賞味期限切れだと思うのでこのツイートを見た方は消しておいてください...</p>&mdash; あらや (@_araya_) <a href=\"https://twitter.com/_araya_/status/927929698738245632?ref_src=twsrc%5Etfw\">2017年11月7日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">放った刺客により、前職のQiita::Teamに投稿したポエムを削除することに成功した</p>&mdash; あらや (@_araya_) <a href=\"https://twitter.com/_araya_/status/928878620357009409?ref_src=twsrc%5Etfw\">2017年11月10日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>数百行のlintエラーを直し、言いたかったことを言ってすっきり退職しました。<br>\n退職直前に負債を出来る限り返済するの、気持ちよく退職できるのでおすすめです。</p>\n<h2 id=\"-\">ヘマタイトでやっていること・やりたいこと</h2>\n<p>ヘマタイトでは受託開発をやったり、「セキュリティと教育」をメインの事業領域として、自社開発をやっています。</p>\n<p>ヘマタイトはフルタイムの社員が4,5名程度の小さな会社です。\n少ない人数で多くの開発を回しているおかげで、多様な技術に触れられ、技術者としてかなり楽しく働いています。</p>\n<p>まだ入社したばかりだというのもありますが、ヘマタイトでやりたいことは本当に色々あって、</p>\n<ul>\n<li>ヘマタイトって何の会社？って聞かれたときに「これ作っている会社です」ってドヤ顔で言えるような製品を作る</li>\n<li>収益あげて社員全員で富豪になる</li>\n<li>実装も見た目もかっこいいプロダクトを作る</li>\n<li>技術の共有を効率良く行い、社内の技術レベルをあげる</li>\n<li>とにかく楽しくものづくりをする</li>\n<li>エンジニアリング以外にも、UI/UX、マーケティングのスキルを少しでも身につける</li>\n<li>対外的発信能力の向上(テックブログとかやりたい)</li>\n</ul>\n<p>などなど。僕が勝手に言っているだけなので他のメンバーからストップがかかるかもしれませんが、こんなことを目指してやっていきたいです。</p>\n<h2 id=\"-\">最後に</h2>\n<p>今までお世話になった皆様に感謝しつつ、これからもやっていきます:muscle: <br>\nよろしくおねがいします :clap:</p>\n"
    }
  },
  {
    "2017-12-15-javascript-nan": {
      "title": "JavaScript の NaN について",
      "tags": [
        "JavaScript"
      ],
      "date": "2017-12-15 15:44:13 +0900",
      "category": "",
      "body": "<p>この記事は<a href=\"https://adventar.org/calendars/2199\">#kosen10s Advent Calendar 2017</a>の15日目の記事です。</p>\n<p>昨日は<a href=\"http://cycloneo.hatenablog.com/entry/2017/12/14/215238\">寒い日は紅茶に砂糖を入れて飲むとおいしい - 死後裁きにあう</a>でした。\n美味しい紅茶が飲みたくなりました。</p>\n<p>2つとった枠のうち1つは技術系の記事を書こうと思ってたのですが、準備不足もあり小ネタです。</p>\n<p>JavaScriptでコードを書いていると、まれに<code>NaN(Not a Number)</code>に遭遇することがあります。\n別に知ってれば大したことないのですが、若干ややこしくて厄介なのでNaNについて解説したいと思います。</p>\n<h2 id=\"-\">どういうときに遭遇するか</h2>\n<p>NaNは<code>Math</code> objectの関数に引数として不適な値を渡したり、<code>parseInt()</code>などで文字列を数値に変換させようとすると返ってくることがあります。</p>\n<p>また、<code>let x = NaN</code>のように代入可能です。</p>\n<p>例:\n{% highlight javascript %}\nMath.sqrt(-1); // =&gt; NaN 虚数は返ってこない\nparseInt(&#39;hello&#39;, 10) // =&gt; NaN\n{% endhighlight %}</p>\n<p><code>https://example.com?page=18</code>というURLから<code>page</code>パラメータを取得し、その値に応じて表示する内容を書き換える\nといったコードを書いた時、<code>https://example.com?page=hello</code>に対しては例外処理が必要です。</p>\n<p>ちなみに、数値<code>x(!==0)</code>を<code>0</code>で割ったときには<code>Infinity</code>もしくは<code>-Infinity</code>となり、<code>0 / 0</code>は<code>NaN</code>となります</p>\n<h2 id=\"truthy-falsy\">Truthy, Falsy</h2>\n<p><code>NaN</code>を単体で評価するとFalsyになります。直感的ですね。\n{% highlight javascript %}\nNaN ? &#39;foo&#39; : &#39;hoge&#39;; // =&gt; &#39;hoge&#39;\n{% endhighlight %}</p>\n<h2 id=\"-\">比較</h2>\n<p><code>NaN</code>は比較演算子で評価した場合、どんな値とも等価にはなりません。\nここで気をつけなければいけないのが、<code>NaN === NaN</code>が<code>false</code>になることです。</p>\n<p>{% highlight javascript %}\nNaN === false // =&gt; false\nNaN === 0 // =&gt; false\nNaN &gt; 0 // =&gt; false\nNaN &lt; 0 // =&gt; false\nNaN === NaN // =&gt; false\nNaN !== false // =&gt; true\nNaN !== true // =&gt; true\nNaN !== NaN // =&gt; true\n{% endhighlight %}</p>\n<h2 id=\"nan-\">NaNの検出</h2>\n<p>JavaScriptには<code>isNaN()</code>というトップレベル関数が用意されています。引数を一つとり、boolean(true | false)を返します。\nただ、この<code>isNaN()</code>にも一癖あって、渡された引数が<code>NaN</code>以外にも、文字列、undefined、Object、 Functionだった場合も<code>true</code>を返します。<br>\nそのため、<code>isNaN(x)</code>により<code>true</code>が返却されても、<code>x</code>が<code>NaN</code>である保証はありません。</p>\n<p>{% highlight javascript %}\nisNaN(NaN) // =&gt; true\nisNaN(undefined) // =&gt; true\nisNaN(&#39;hello&#39;) // =&gt; true\nisNaN({}) // =&gt; true\nisNaN(new Function) // =&gt; true\nisNaN(0) // =&gt; false\nisNaN(true) // =&gt; false\nisNaN(null) // =&gt; false\n{% endhighlight %}</p>\n<p>引数がArrayの場合はlengthが0か、要素1つだけで値が数値またはnullの場合のみ<code>false</code>が返ります</p>\n<p>{% highlight javascript %}\nisNaN([1,2,3]) // =&gt; true\nisNaN([&#39;hello&#39;]) // =&gt; true\nisNaN([true]) // =&gt; true\nisNaN([]) // =&gt; false\nisNaN([1]) // =&gt; false\nisNaN([null]) // =&gt; false\n{% endhighlight %}</p>\n<p>非常にややこしいですね。覚えなくて大丈夫です。<br>\nというのも、ECMAScript2015で<code>Number.isNaN()</code>が導入され、これを用いることにより<code>NaN</code>かどうかを正しく評価することができるようになりました。</p>\n<p>{% highlight javascript %}\nNumber.isNaN(NaN) // =&gt; true\nNumber.isNaN(undefined) // =&gt; false\nNumber.isNaN(&#39;hello&#39;) // =&gt; false\nNumber.isNaN({}) // =&gt; false\nNumber.isNaN(new Function) // =&gt; false\nNumber.isNaN(0) // =&gt; false\nNumber.isNaN(true) // =&gt; false\nNumber.isNaN(null) // =&gt; false\n{% endhighlight %}</p>\n<p>すばらしいですね。非常にわかりやすくなりました。とはいえ、前時代のJavaScriptを書かなければいけないこともあるかもしれません。\nそのときは先に述べた、<code>NaNは比較演算子で評価した場合、どんな値とも等価にはならない</code>という性質を利用します。\n{% highlight javascript %}\nNumber.isNaN = function(val) {\n  return val !== val;\n}</p>\n<p>Number.isNaN(NaN) // =&gt; true;\nNumber.isNaN(0) // =&gt; false;\n{% endhighlight %}</p>\n<h2 id=\"-\">まとめ</h2>\n<p>トップレベル関数の<code>isNaN()</code>は使ってはいけません。<code>Number.isNaN()</code>を使いましょう。</p>\n<p>明日はruryushamさんの記事です。</p>\n"
    }
  },
  {
    "2018-02-09-chrome-65-beta": {
      "title": "Chrome 65 Beta",
      "tags": [
        "Chrome",
        "Browser",
        "翻訳"
      ],
      "date": "2018-02-09 04:00:00 +0900",
      "category": "",
      "body": "<p>Chrome Betaの最新版65がでました。(<a href=\"http://blog.chromium.org/2018/02/chrome-65-beta-css-paint-api-and.html\">元記事</a>)</p>\n<p>今回特に大きいのはCSS Paint APIですね。</p>\n<h2 id=\"css-paint-api\">CSS Paint API</h2>\n<p>CSS Paint APIを使うと、CSSのプロパティの要求に合わせて動的に画像を生成することができます。</p>\n<p><a href=\"https://storage.googleapis.com/webfundamentals-assets/paintapi/checkercast_vp8.webm\">デモ動画</a>\nを観るとわかりますが、カスタムプロパティを変更すると、JSがそれを検知してイメージを動的に更新しています。</p>\n<p>これをうまく使うとDOMツリーを軽くしたり普通に画像をつかうよりもファイルサイズを小さくすることができます。</p>\n<h2 id=\"server-timing-api\">Server Timing API</h2>\n<p>Server Timing APIにより、Webサーバーがブラウザにパフォーマンス情報を送信することができます。<br>\nサーバーからのHTTPレスポンスに<code>Server-Timing</code>ヘッダーを追加し、そのヘッダー内に任意のパフォーマンス情報を記述します。<br>\nたとえば、データベースからの読み込みに何ms、書き込みに何ms、ファイルシステムからの読み込みに何msかかったというような情報をブラウザに送ってあげることにより、Webサーバーからのレスポンスタイムだけでなく更に深いところまでパフォーマンスメトリクスをブラウザ上で確認することができます。</p>\n<h2 id=\"-\">その他の機能</h2>\n<h3 id=\"css\">CSS</h3>\n<ul>\n<li>擬似クラス <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:any-link\">:any-link</a>が使えるようになった。</li>\n<li><code>color</code>プロパティの色指定が<a href=\"https://drafts.csswg.org/css-color/\">CSS Color Module Level 4</a>準拠になった。</li>\n<li>自身のboxは作らないが、子要素や疑似要素のboxは生成する<code>display: contents</code>が使えるようになった。</li>\n</ul>\n<h3 id=\"dom\">DOM</h3>\n<ul>\n<li><code>assignedNodes()</code>を補完するために<code>&lt;slot&gt;</code>要素が<code>assignedElements()</code>メソッドを持つようになった。</li>\n<li><code>HTMLAnchorElement.relList</code>をサポート。<code>&lt;a&gt;</code>要素で指定されたリソースと現在のリソースの関係性を示すための機能。</li>\n</ul>\n<h3 id=\"feature-policy\">Feature Policy</h3>\n<ul>\n<li><a href=\"http://xhr.featurepolicy.rocks/\">sync-xhr feature policy</a>が使えるようになった。</li>\n</ul>\n<h3 id=\"network\">Network</h3>\n<ul>\n<li>TLSの仕様との互換性を取るため、<a href=\"https://tools.ietf.org/html/draft-ietf-tls-tls13-23\">TLS1.3のdraft-23</a>をサポート。</li>\n<li><code>Request.destination</code>でどのリソースをService Workerがfetchしてるか評価できるようになった。</li>\n</ul>\n<h3 id=\"performance-api\">Performance API</h3>\n<ul>\n<li><code>PerformanceResourceTiming</code>、<code>PerformanceLongTaskTiming</code>、<code>TaskAttributionTiming</code>が <code>toJSON</code>メソッドをサポート。</li>\n</ul>\n<h3 id=\"security\">Security</h3>\n<ul>\n<li><code>cross-origin</code>属性付きの<code>&lt;a&gt;</code>要素の<code>download</code>属性を無視する。</li>\n</ul>\n<h2 id=\"-\">廃止と相互運用性の改善</h2>\n<h3 id=\"bindings\">Bindings</h3>\n<ul>\n<li>HTMLの仕様と合わせ、<code>document.all</code>は上書き禁止となる。</li>\n</ul>\n<h3 id=\"network\">Network</h3>\n<ul>\n<li>2017/12/01以降に発行されたSymantecのレガシーなPKI(Public Key Infrastructure)を信頼しない。\nこれが影響するのはDigiCertの新しいPKIへの移行を明示的にオプトアウトしたサイト運営者だけで、このインフラから独立した、前もって公開されたサブ認証局には影響しない。</li>\n</ul>\n"
    }
  },
  {
    "2018-02-09-safari-technology-preview-49-ja": {
      "title": "Safari Technology Preview 49",
      "tags": [
        "Safari",
        "Browser",
        "翻訳"
      ],
      "date": "2018-02-09 03:30:00 +0900",
      "category": "",
      "body": "<p>Safari Technology Preview 49の変更点を訳しただけ。\n(<a href=\"https://webkit.org/blog/8088/release-notes-for-safari-technology-preview-49/\">元記事</a>)</p>\n<h3 id=\"service-workers\">Service Workers</h3>\n<ul>\n<li>永続的ストレージからリストアされたService Workerが<code>activated</code>状態を持つように変更。</li>\n<li>応答しないService Workerは終了させるように変更。</li>\n<li>JavaScriptが<code>register()</code>を再度呼び出したときに、ディスクからService Workerの登録がリストアされるのを防ぐ。</li>\n</ul>\n<h3 id=\"fetch\">Fetch</h3>\n<ul>\n<li>Fetchレスポンスのチャンクデータが受け取られた際のConsumeDataコールバックをサポート</li>\n<li>ロードされている不明瞭なレスポンスにおいてそのbodyがクローンされるように変更。</li>\n<li>不明瞭なレスポンスからFetchヘッダーを除外</li>\n<li>Fetchのリダイレクトが<code>no-cors</code>モードと互換性のあるように修正</li>\n<li>リクエストがnullだったらリクエストからURLをコピーするようにFetchレスポンスを修正</li>\n<li>スクリプトとCSSをロードするためのFetchのオプションに整合性を設定</li>\n</ul>\n<h3 id=\"intelligent-tracking-prevention\">Intelligent Tracking Prevention</h3>\n<ul>\n<li>ユーザーのインタラクションがない状態での一般的なリソースへのクッキーをブロックする</li>\n<li>Service Workerのローディングとリクエストが正しくIntelligent Tracking Preventionにより正しくクリアされることを保証</li>\n<li>試験的機能として、デバッグモードを導入</li>\n</ul>\n<h3 id=\"css\">CSS</h3>\n<ul>\n<li><code>column-gap</code>でのパーセンテージ指定をサポート</li>\n<li>CSSメディアクエリ内での<code>calc()</code>のパースをサポート</li>\n<li>block/cross-axisのアラインメントプロパティから<code>left</code>と<code>right</code>を削除。</li>\n<li>CSSワーキンググループの勧告を採用し、<code>css-align</code>プロパティ内の<code>self-position</code>もしくは<code>content-position</code>に先行する<code>overflow-position</code>を必須とする。</li>\n<li><code>justify-content</code>プロパティの値としてとして有効な<code>baseline</code>を削除。</li>\n<li><code>scale</code>が1より大きい時の<code>position:fixed</code>な要素のスクロール位置の演算を修正</li>\n<li>色彩反転がオンになってたとき、オリジナルのimage、picture要素の色を保存する</li>\n</ul>\n<h3 id=\"rendering\">Rendering</h3>\n<ul>\n<li>数式を表示するときのoverflowを修正</li>\n<li>複数のiframeを持つ高速でないスクロール可能領域の構築を最適化</li>\n</ul>\n<h3 id=\"svg\">SVG</h3>\n<ul>\n<li>軸の半径の0を許容し、エフェクトを適用できるように<code>feMorphology</code>フィルターを修正</li>\n</ul>\n<h3 id=\"javascript\">JavaScript</h3>\n<ul>\n<li><code>trimStart</code>と<code>trimEnd</code>の実装</li>\n<li>JavaScriptのJSONサブセットを作成するStringの改行コードの制限を緩くする。</li>\n</ul>\n<h3 id=\"web-inspector\">Web Inspector</h3>\n<ul>\n<li>兄弟を持たないpath要素をクリックして選択できるように変更</li>\n<li>Layersタブが動くポップオーバーの代わりに静的に位置づけられたレイヤー詳細パネルを使用するように変更。</li>\n<li>Web InspectorがRTL(Right To Left)レイアウトになっていてもStylesサイドバーが常にCSSルールを左から右に表示するように修正</li>\n<li>Canvasタブが複数の&quot;waiting for frames&quot;メッセージを表示するときに発生する問題を修正。</li>\n<li>Canvasタブのレコードボタンがマウスオーバーしても出現しないことがある問題を修正</li>\n<li>Networkタブが、ソートされたカラムが非表示され再表示された時に、インディケーターをソートして非表示にしてしまうバグを修正。</li>\n<li>デフォルトのズームレベルでないとときにNetworkタブのテーブルカラムが揺れないように修正</li>\n<li>Stylesサイドバーを素早く更新することによって発生するデータの破損問題を修正。</li>\n<li>コメントアウトされた過去のプロパティを移動するときにStylesサイドバーがエラーを吐かないように修正。</li>\n<li>Resourceタブの詳細サイドバーが非常に長いURLをより良くラップしてくれるようにWindowのりサイズを修正。</li>\n<li>すべてのカラムが必須だったらテーブルヘッダーを右クリックしても&quot;Displayed Columns&quot;を表示しない。</li>\n<li>幅が小さいときのNetworkタブのCookiesテーブルの挙動を改善。</li>\n<li>高さが小さい時のナビゲーションバーのレイアウトを改善。</li>\n</ul>\n<h3 id=\"media\">Media</h3>\n<ul>\n<li>CDMinstanceClearKeyの異なるセッションからの複数のキーをサポート。</li>\n<li>media要素がなかったらNowPlayingステータスを終了させるように変更。</li>\n<li>新規作成された色空間の代わりに既存のRGB色空間を使用するように変更。</li>\n<li>WebVTTがHLS経由でサーブされる合図を修正</li>\n</ul>\n<h3 id=\"storage\">Storage</h3>\n<ul>\n<li>AppCacheを使っていたらdeprecation警告をコンソールに表示する。</li>\n<li>割当などのキャシュストレージのエラーのためのコンソールメッセージを追加。</li>\n<li>Sevice Workerが登録されてなかったらメインリソースをロードしている時にストレージのプロセスを使わないように変更。</li>\n<li>Sevice Workerが登録されてなかったらService Workerクライアントを登録している時にストレージのプロセスを使わないように変更。</li>\n<li>同タイミングで呼ばれた <code>caches.open</code>のプロミスをCache APIが解決することを保証する。</li>\n<li>指定されたオリジンのデータをクリアするときにDOMCacheデータが正しく削除されない問題を修正。</li>\n<li>デフォルトのキャッシュストレージの割当を50MBに増量。</li>\n</ul>\n<h3 id=\"security\">Security</h3>\n<ul>\n<li>JavaScript URLに遷移するときに、対象となるwindowのポリシーチェックを追加。</li>\n<li>Service WorkerのレスポンスをチェックするCSPポストを追加。</li>\n<li><code>allow-same-origin</code>フラグがないサンドボックスフレームでの、Service WorkerとCache APIへのアクセスを無効にする。</li>\n<li><code>frame-ancestor</code>指令をContent Security Policy Level3に適合するように更新。</li>\n</ul>\n<h3 id=\"accessibility\">Accessibility</h3>\n<ul>\n<li>ARIA active-descendantをサポート。</li>\n<li>VoiceOverにWebセッションを一意に識別する方法を追加。</li>\n<li><code>graphics-document</code>、<code>graphics-object</code>、<code>graphics-symbol</code>のGraphics ARIAロールをサポート。</li>\n<li>SVGルートの場合にARIAロールの属性の上書きからSVG AAMマッピングを保護する。</li>\n</ul>\n<h3 id=\"bug-fixes\">Bug Fixes</h3>\n<ul>\n<li>サブリソースのロードのリダイレクトがService Workerのコントローラーを変更できるように保証することによって、<a href=\"https://formus.swift.org\">formus.swift.org</a>でのGitHubログインを修正。</li>\n<li>Microsoft Word for Mac 2011のblob変換とサニタイズを修正。</li>\n<li>PostScriptの名前が指定されていたら、許可されていないユーザーインストールのフォントが使用されないように変更。</li>\n</ul>\n<h2 id=\"-\">所感</h2>\n<p>46でService Workerが入ってからService Worker周りの修正が続々と入ってますね。</p>\n<p>ところどころ知識が追いついていないせいで怪しいところがあったりするので、間違い等あったら指摘してください。</p>\n"
    }
  },
  {
    "2018-02-19-inside-frontend-2": {
      "title": "InsideFrontend #2 に参加してきた",
      "tags": [
        "勉強会レポート"
      ],
      "date": "2018-02-19 16:00:00 +0900",
      "category": "",
      "body": "<p>2/11に日経カンファレンスルームで開催された<a href=\"https://inside-frontend.com/\">Inside Frontend #2</a>に参加してきました。</p>\n<p>このイベントには去年も参加していて、非常にいいイベントだったので今年も参加させてもらいました。</p>\n<p>Inside Frontendはほとんどのセッションの資料や、録画映像が配信されているので、\nこの投稿では各セッションを聴いての感想とかAMAを中心に書こうと思います。</p>\n<p>配信: <a href=\"https://freshlive.tv/tech-conference/189060\">セミナーA</a> / <a href=\"https://freshlive.tv/tech-conference/189061\">セミナーB</a></p>\n<p>資料: <a href=\"https://inside-frontend.connpass.com/event/74625/presentation/\">connpassで公開されている資料</a></p>\n<h2 id=\"opening\">Opening</h2>\n<p>オープニングでは会場説明やWiFi、行動規範などの諸注意がありました。</p>\n<p>その後、スポンサーである<a href=\"https://moffers.jp/\">moffers</a>さんからサービスの紹介がありました。\nまた、moffersさんの提供で、AMAの会場でコーヒーが配られていて、ありがたく頂きました。</p>\n<p>moffersはレジュメをサブミットすると企業からスカウトが届く転職支援サービスで、\nオファーの時点で年収が確約されてるのは個人的にかなり好みなので、次転職する機会があったときは使いたいです。</p>\n<h2 id=\"vary-the-vary-header-and-the-future-of-cache-variation-by-andrew-betts\">Varyヘッダとキャッシュバリエーションの将来(The Vary header and the future of cache variation) by <a href=\"https://twitter.com/triblondon\">Andrew Betts</a></h2>\n<p>FastlyのAndrew Bettsによるキャッシュ周りのトークでした。(<a href=\"https://speakerdeck.com/triblondon/vary-and-the-future-of-cache-variation\">資料</a>)</p>\n<h3 id=\"-\">概要</h3>\n<ul>\n<li>フロントエンドエンジニアはマークアップやJSの知識だけ持っていれば良いわけではなく、キャッシュなどを適切に扱うためにはHTTPの知識が重要。</li>\n<li>キャッシュを適切に扱うためにはVaryヘッダーとCDNの理解が必要</li>\n<li>余分なレスポンスを受け取らなきゃいけないためコンテントネゴシエーションの原案は死んだと言っていい</li>\n<li>Varyヘッダを適切に利用することで、キャッシュサーバーを経由していても同じURLから異なるレスポンス(Language, ファイル形式など)を得ることが可能　</li>\n<li><code>Vary: Accept-Language</code>をヘッダーに付与すると、Accept-Languageによってレスポンスが異なることをキャッシュサーバーに伝えることができる。</li>\n<li>同じURLへのリクエストに対しては常に同じVaryヘッダーを含めるべき</li>\n<li>ブラウザは6段階のキャッシュの仕組みを持っている。すべてVaryをサポートすべきだが状況は微妙</li>\n</ul>\n<h3 id=\"-\">感想</h3>\n<ul>\n<li>Varyヘッダーの存在は知ってたけど正しい使い方がよく分かってなかったので、そのあたりを知れたのはよかった。</li>\n<li>ブラウザキャッシュとCDNでキャッシュの流れが複雑化してるので、しっかり理解してクールにキャッシュするWebサイトを作りたい。</li>\n</ul>\n<h2 id=\"ama-webpayments-api\">AMA WebPayments API</h2>\n<p>1つめのAMAでは<a href=\"https://twitter.com/agektmr\">Eiji Kitamura</a>さんのブースでPayment Request APIの話を聞きました。</p>\n<p><a href=\"https://github.com/insidefrontend/issue2-ama/labels/C1-3%3A%20Payment\">質疑一覧</a></p>\n<h3 id=\"-\">概要</h3>\n<ul>\n<li>Payment Request APIでブラウザのNativeUIを使える。</li>\n<li>ユーザーはブラウザに保存されているクレジットカードなどの決済情報を使用することができる。</li>\n<li>クレジットカード以外にも、サードパーティのPaymentサービスを自分で追加できる</li>\n<li>参考になる記事: <a href=\"https://blog.agektmr.com/2017/12/web-payment-misconception.html\">https://blog.agektmr.com/2017/12/web-payment-misconception.html</a></li>\n<li>ユーザーが支払い情報を入力してサブミットすると、JSON形式でPayment Request APIから返却される。</li>\n<li>従来の入力フォームより75%少ない時間で決済が完了するというケーススタディ</li>\n<li>クレジットカードの生の情報じゃなくて、Tokenを扱うのでセキュア</li>\n<li>現実的には、実際にサイトの開発者がPayment Request APIを直に触ることはない。決済代行業者のSDKが基本的にやってくれる。</li>\n</ul>\n<h2 id=\"-es201x-by-koutaro-chikuba\">現場の ES201x とアーキテクチャの変遷と未来 by <a href=\"https://twitter.com/mizchi\">Koutaro Chikuba</a></h2>\n<p>mizchiさんによるフロントエンドの歴史と未来の話でした。</p>\n<p><a href=\"https://speakerdeck.com/mizchi/real-world-es201x-and-future\">資料</a></p>\n<h3 id=\"-\">概要</h3>\n<ul>\n<li>みんな消耗してる(IE11, webpack.config.js, 現場で動くjQuery...)</li>\n<li>自分のコードに必要なもの、腐る部分、腐らない部分を見極める力をつけてほしい</li>\n<li>セルフスクレイピングの時代 -&gt; テンプレーティングの時代 -&gt; データバインディングの時代 -&gt; Flux/Observableの時代</li>\n<li>フロントエンドは富豪的設計とマイクロチューニングを繰り返して、その先にある&quot;理想&quot;に近づいてる</li>\n<li>AltJSは文法追加とか機能提案をしてきて、それがどんどんES201xに入ってきた</li>\n<li>最近の流行はとにかく型</li>\n<li>Observableとか、静的型検査がないとしんどい</li>\n<li>お祈りデプロイ50%の時代から5%くらいの時代になった</li>\n<li>WebComponentsで「xxxデザインのyyy(フレームワーク)実装」みたいなのは死ぬはず。</li>\n<li>まずは現場にある古いコードを手懐けるところから</li>\n<li>いいコード: 静的検査、インターフェースが明らか、簡単に捨てられる</li>\n<li>悪いコード: モジュール境界が明らかじゃない</li>\n<li>今のフロントエンド: OOP, FP, GUI設計論の知見がごった煮の、様々な思想をぶつけあう戦場</li>\n</ul>\n<h3 id=\"-\">感想</h3>\n<ul>\n<li>前半は今までのフロントエンドの変遷がよくまとめられていて分かりやすかった。自分が若いフロントエンジニアってのもあって、\n4割くらいは知らない時代の話だった。</li>\n<li>トーク中に出てきた「型がないとRxかけない」って話は全力で同意だった。自分が途中で参加したプロジェクトでは絶対に<code>someFunc(): Observable&lt;any&gt;</code>を殺すという強い意気込みを持ってやっていきたい。</li>\n<li>良いコードの例で「簡単に捨てられる」というのがあったが、これはあんまり今まで意識してなかったので、意識してやってみる。</li>\n</ul>\n<h2 id=\"ama-es201x-\">AMA 現場の ES201x とアーキテクチャの変遷と未来</h2>\n<p>前の時間枠でmizchiさんのセッションを聴いたので、AMAもmizchiさんのブースでお話を聴いた。</p>\n<p><a href=\"https://github.com/insidefrontend/issue2-ama/labels/C2-1%3A%20ES201x\">質疑一覧</a></p>\n<h3 id=\"-\">概要</h3>\n<ul>\n<li>ほとんどの消耗はIE11が原因。</li>\n<li>IE11をサポートから外す言い訳はいくらでもできる。</li>\n<li>フロントエンドエンジニアっていうラベル付は破綻してる</li>\n<li>デザイン方面から来た人と、node.jsから来た人だと価値観が違う。前者は供給が多いので、フロントエンドってくくりで一緒にすると全体の給与水準は下がる</li>\n<li>URLがマスターなのか内部状態がマスターなのかは意識してRouterを書くべき</li>\n<li>WebComponentsはまだエコシステムが整ってないので、現場で使える状態ではないと思う</li>\n<li>ようやくState管理で議論ができるようになったのでいい時代</li>\n</ul>\n<h2 id=\"-fresh-web-ver-by-\">攻めつづける FRESH! の Web ver.新春  by <a href=\"https://twitter.com/sutiwo\">すちを</a></h2>\n<p>sutiwoさんによるFRESH!のフロントエンドの進化のお話でした。</p>\n<p><a href=\"https://speakerdeck.com/sutiwo/gong-metudukeru-fresh-falseweb-ver-dot-xin-chun\">資料</a></p>\n<h3 id=\"-\">概要</h3>\n<p>-　今まで決済代行サービスを使っていたが、購入手続きのたびに別ドメインに遷移するのを避けたかったし、FRESH!のサービス側で決済情報を持ちたくなかった -&gt; Payment Request API</p>\n<ul>\n<li>現段階では対応ブラウザはChromeだけで、対応している決済方法はクレジットカードのみ。</li>\n<li>EdgeはMicroSoftアカウントを使わないといけなかった。それはユーザー体験が悪すぎた。</li>\n<li>Reactをv15からv16にあげた。Fragmentやrender()の修正で余分な要素(div, spanなど)を作らなくてよくなった。</li>\n<li>パフォーマンスの改善はとくに見られなかった</li>\n<li>デプロイフローで、チェックシートにあるテスト項目を手で確認するのが大変だった。</li>\n<li>Puppeteerとmochaでテスト自動化</li>\n<li>CIでスナップショットのテストとかもやりたい</li>\n</ul>\n<h3 id=\"-\">感想</h3>\n<p>新しい技術をとりいれて、非効率なフローを効率化して、どんどん攻めていく姿勢はすごく良いと思ったし、こういう環境で仕事がしたいと思った。</p>\n<h2 id=\"ama-es201x-\">AMA 現場の ES201x とアーキテクチャの変遷と未来</h2>\n<p>前時間枠のAMAに引き続きmizchiさんのAMAブースでお話を聴ききました。</p>\n<p>質問を消化しきったので、同時間枠に別のAMAブースで<a href=\"https://twitter.com/ahomu\">@ahomu</a>さんと<a href=\"https://twitter.com/1000ch\">@1000ch</a>さんがやっている\n超速本の裏話をするというまさかの会でした。</p>\n<p><a href=\"http://mizchi.hatenablog.com/entry/2017/11/24/141301\">mizchiさんの書評記事</a>をベースに、いろいろおもしろい話が聴けました。</p>\n<p>その中で「ChromeのDevToolsはUIがすぐ変わるから読むなら早く読んだほうがいい」と話していて、たしかに...と思い僕は買っていてまだ手をつけてなかった超速本をすぐ読むことにしました。</p>\n<h3 id=\"-by-sisidovski\">日経電子版を速くするためにやっていること by <a href=\"https://twitter.com/sisidovski\">sisidovski</a></h3>\n<p>sisidovskiさんによる話題の日経電子版がなぜこんなに速いかというお話でした。</p>\n<p><a href=\"https://speakerdeck.com/sisidovski/nikkei-inside-frontend\">資料</a></p>\n<h3 id=\"-\">概要</h3>\n<ul>\n<li>モバイルサイトは全面刷新。表示速度は約2倍になり、Hearstのランキングで2位になった</li>\n<li>Financial Timesの調査で サイトの速度が1秒落ちるとユーザーエンゲージメントは5%下がることがわかった</li>\n<li>チーム発足時からチーム内でスピードを最重要KPIにした</li>\n<li>r.nikkei.comとネイティブアプリのバックエンドでFastlyを使ってる</li>\n<li>CDNでできるところは任せる</li>\n<li>VCLで柔軟にキャッシュを制御。ただVCLは辛い。</li>\n<li>キャッシュヒット率90%, 有料会員に対しても70%以上</li>\n<li>あとでいいことはあとでする。</li>\n<li>必要なことは先にする。</li>\n<li>使いまわせるものは使い回す</li>\n<li>クライアントにとって最適なものを配信</li>\n<li>まずは分析すること。Lighthouseやwebpagetestなどのツールを使う。</li>\n<li>手がつけられるところから手を付ける</li>\n</ul>\n<h3 id=\"-\">感想</h3>\n<ul>\n<li>高速化やCDN(Fastly)の使い方の知見が濃く詰まった非常に良いセッションだった。自分の中でパフォーマンス向上やっていきが非常に高まった。</li>\n<li>既存のサービスと現実的にどう向き合って、ユーザーが喜ぶようなパフォーマンス改善を施していくか、よくまとめられていて良かった。</li>\n</ul>\n<h2 id=\"ama-\">AMA 日経電子版の高速化について何でも訊いて下さい</h2>\n<p><a href=\"https://twitter.com/sisidovski\">sisidovski</a>さんと<a href=\"https://twitter.com/cssradar\">cssradar</a>さんの\n日経電子版の高速化のAMAブースでお話を聴きました。</p>\n<p><a href=\"https://github.com/insidefrontend/issue2-ama/labels/C4-1%3A%20Nikkei\">質疑一覧</a></p>\n<h3 id=\"-\">概要</h3>\n<ul>\n<li>BabelでPolifyllやらせると、無駄なコードを作ってしまうので、ランタイムでPolyfillしてる</li>\n<li>広告の表示を高速にするために全部同じAd Serverから受け取ってたり、document.writeを吸収して書き換えてる。そのあとevalして、shadowDOMでレンダリングしてる</li>\n<li>仮にAdServerが死んでも影響が出ないようにしている</li>\n<li>prerenderがChrome58から無効化されてる(chromeの内部ロジック置き換えのため一時的に)</li>\n</ul>\n<h2 id=\"-by-takanori-sugawara\">デザインシステムとコードを密結合するワークフロー by <a href=\"https://twitter.com/oligin020\">Takanori Sugawara</a></h2>\n<p>Takanori Sugawaraさんによる、デザインシステムとコーディングを蜜に連携させるフローを構築するお話でした。</p>\n<p>資料は公開されていないようです。</p>\n<h3 id=\"-\">概要</h3>\n<ul>\n<li>チームでは基本みんなリモートなので認識合わせのコストが高い</li>\n<li>現状の実装構造が複雑化 -&gt; プロダクトの変化速度が低下して身動き取れなくなる</li>\n<li>企画から実装まで、職種による翻訳や出戻りが多く発生する</li>\n<li>全員でUIデザインしたらレビューいらなくね? -&gt; Figmaでやってみた</li>\n<li>企画には具象度を高めてもらって、エンジニアには抽象度を高めてもらう</li>\n<li>全員同じ土俵でUIを作った</li>\n<li>UI実装の依存関係も定義する</li>\n<li>UIデザインにないものは絶対に実装されないルールにした</li>\n<li>Figmaの実践とVue.jsのライブコーディングによるデモ</li>\n</ul>\n<h3 id=\"-\">感想</h3>\n<ul>\n<li>「UIデザインにないものは絶対に実装されないルール」というのが個人的に刺さった。これを徹底できるとデザインされたコンポーネントは破綻しづらいし、\nコーディングでスタイルも書きやすいのでいい。</li>\n<li>最後のセッションはAMAがなくて、質問できなかったのが残念だった。</li>\n</ul>\n<h2 id=\"-\">全体を通して</h2>\n<p>今年も数多くの有益な知見全開のセッションを聴けて大変勉強になりました！運営の皆様、発表者の皆様、本当にお疲れ様でした、ありがとうございました！！</p>\n<p>また来年予定が合ったら参加したいし、トークも応募したいと思います！</p>\n<p>数日後に、Rebuild.fmの<a href=\"http://rebuild.fm/201/\">このエピソード</a>を聴いていたら、Inside Frontendや超速本の話が出ていて面白かったです笑</p>\n"
    }
  },
  {
    "2018-03-22-react-native-packages-build-error-by-gms": {
      "title": "React Nativeの一部のライブラリが原因でAndroidのビルドが失敗する件について",
      "tags": [
        "React Native"
      ],
      "date": "2018-03-22 10:00:00 +0900",
      "category": "",
      "body": "<h2 id=\"-\">何が起こっているか</h2>\n<p>React Nativeプロジェクトで、react-native-cameraなどの一部のライブラリに依存しているとAndroidのビルドが失敗する現象が起きています。</p>\n<pre><code>Execution failed for task &#39;:react-native-camera:processReleaseResources&#39;.\n\n&gt; Error: more than one library with package name &#39;com.google.android.gms.license&#39;</code></pre><p>僕が気づいたのは21日の23:00頃でした。</p>\n<h2 id=\"-\">原因</h2>\n<p><a href=\"https://developers.google.com/android/guides/releases\">Google Play servicesの12.0.0がリリースされた</a>ことにより、ライブラリ内の <code>build.gradle</code> で</p>\n<pre><code>compile &#39;com.google.android.gms:play-services-vision:+&#39;</code></pre><p>のように、Google Play Servicesの最新バージョンを指定しているとビルドが失敗します。\n(この例ではplay-services-vision)</p>\n<h2 id=\"-\">解決策</h2>\n<p>Google Play Servicesのバージョンを11.8.0に固定することで、ひとまずこの問題は解決します。</p>\n<p>しかし、本来は各ライブラリが12.0.0に対応すべきなので、あくまで一時的な対応であることに留意してください。</p>\n<p>具体的には、次のAもしくはBどちらかを施すことでビルドエラーを回避することができます。</p>\n<h3 id=\"a-package-build-gradle-\">A. package内のbuild.gradleを書き換える</h3>\n<p>問題が起きているpackage(今回の例ではreact-native-camera)内のbuild.gradle(<code>node_modules/react-native-camera/android/build.gradle</code>)を編集し、Google Play Servicesのバージョンを11.8.0に固定します。</p>\n<p>before: <code>&#39;com.google.android.gms:play-services-vision:+&#39;</code></p>\n<p>after: <code>&#39;com.google.android.gms:play-services-vision:11.8.0&#39;</code></p>\n<h3 id=\"b-build-gradle-google-play-services-11-8-0-\">B. プロジェクトのbuild.gradleでGoogle Play Servicesのバージョンを11.8.0に固定する</h3>\n<p><code>android/build.gradle</code>に以下のように記述することで、Google Play Servicesのバージョンを固定します。</p>\n<pre><code>allprojects {\n    repositories {\n        configurations.all {\n            resolutionStrategy {\n                force &quot;com.google.android.gms:play-services-vision:11.8.0&quot;\n            }\n        }\n    }\n}</code></pre><p>react-native-cameraでは現在、Gradleの他のConfigの修正と合わせて対応が進んでいます。</p>\n<ul>\n<li><a href=\"https://github.com/react-native-community/react-native-camera/pull/1374\">https://github.com/react-native-community/react-native-camera/pull/1374</a></li>\n<li><a href=\"https://github.com/react-native-community/react-native-camera/pull/1380\">https://github.com/react-native-community/react-native-camera/pull/1380</a></li>\n</ul>\n<h3 id=\"-\">参考</h3>\n<ul>\n<li><a href=\"https://github.com/facebook/react-native/issues/18479\">https://github.com/facebook/react-native/issues/18479</a></li>\n<li><a href=\"https://github.com/react-native-community/react-native-camera/issues/1370\">https://github.com/react-native-community/react-native-camera/issues/1370</a></li>\n</ul>\n"
    }
  }
]
