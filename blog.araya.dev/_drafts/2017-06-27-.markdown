---
title: "Souzoh Tech Talk#1"
date: "2017-06-27 19:07:53 +0900"
---

# メルカリカウル開発の舞台裏 osamingo , yudoufu
- カウルの開発は15人くらい
- 最初は4人

Q: 採用アーキテクチャについて教えて
A:
--- サーバーサイド
 GAE主体。WebhookとかAPIが住んでる。
サービスを細かめに切ってる。スケールさせたい単位
DDDで設計してる
DBはDatastore -> User data とCloudSQL -> Master data(CD, Books)
一部Compute engine

--- iOS
RxSwift, APIKit, JSONRPCKit
JSONRPC APIとHTTPのシンプルなAPIをAPIClientのレイヤで抽象化
ストーリーボード使ってるけど、Rxとの相性が悪いのでSegueを極力使わない

Q: 新規プロダクトを作るにあたり気をつけたこと
A:
--- osamingoさん
伸びしろを残した設計 KSS
マイルストーンを適切に設定
Makefileをちゃんとつくって、属人的なオペレーションを排除
コントリビュートガイドラインをちゃんと作った。誰がいつ来てもPR・レビューできるように
PRのテンプレートもちゃんと作った
-> 結果的に正解だった

--- yudoufuさん
あとから人が増えるのは気を使う
速さ と 将来的な変更に強くするバランスに気をつけた
アッテのスタイルをできるだけ踏襲した
iOSの経験が浅いので、新しく入った人に自由にしてもらった。自分が上になるのは良くないと思った

アッテがJSONRPCだったので、カウルも合わせた

Q: メルカリとソウゾウの開発体制の関係
--- osamingoさん
入ってるSlackとかは一緒だから、技術て共有は結構ある

--- yudoufuさん
クライアント側は大きな交流はなくて、
カウルをリリースするにあたって、メルカリのほうにも手を入れたりした
プラットフォームチームは、チームごと会社がメルカリからソウゾウに移ってきた

Q: アプリ開発時に重視していた点
A: 断然速度
すでにブランドができあがっているところから出すので、ユーザーを満足させなきゃいけない。
レスポンスタイムがユーザーにとって一番重要
ディスクキャッシュだと、ディスクに書き込むよりもAPIにリクエスト送ったほうが早いことがある。

Q: 一番苦労したことは
A: 書籍データを処理すること何百万とある画像をサーバーに上げなきゃいけない
バギーな状態とか機能不足の状態で出すのが許されなかった

Q: 回線速度に合わせてチューニングしてる？
A: 特にしてない。全体的なデータ量を減らすのはやったが、目標値までは定めてない。定性的。
回線に合わせて返す画像を変えるとかまではやってない。


Q: テストで工夫してること
--- iOS
最初とりあえずtravis突っ込んだけど、テストは重要なとこしかまだ書けてない
ビルド・デプロイはtravisにやらせてる

--- Server
あんまりテスト書いてない。重要なとこだけ。リリース時期とトレードオフだった
重要なところはライブラリの外出しにして、テストカバレッジを担保してる
golint, govetはかけてる

Q: DDDどのくらい取り入れてるか？
ガッツリ取り入れると学習コスト半端ないから、
ライトウェイトなDDDを取り入れている
- ドメイン層だけは死守する。
- 依存関係のルール化

# ソウゾウエンジニアの働き方
アプリごとにチームが別れてるから朝会とか、社内勉強会とか、ランチで話したりしてる
Go Fridayの例だと、
-  資料の準備をがんばらない
- スキップしない
  - エンジニアが何人か集まると、雑談でもいい話が出てくる
- APIチームに関わる相談でも良い
  - Makefileの話とかしてた
## 他職種とのかかわり
- 共通言語は「プロダクトをどう良くするか」
- カジュアルに質問相談ができる
- 非エンジニアがSQL書いたりログ見てくれる
  - 調査依頼が少なくてプロダクト開発に集中できる
## 開発環境
- Slack, G Suite, Crowi, Github, ZenHub, JIRA, PHP, Go, GCP, Swift3, Java, React

## メルカリとの情報共有
- 社員が得られる情報は同じ
- プラットフォームチーム
  - メルカリとソウゾウの開発をつなぐ機能の開発
  - カウルからメルカリに出品する機能
- All for One
  - メルカリのミッションに向かって同じ目的意識をもっている

## オトクなところ
- 各分野に精通してるエンジニアに聞きにいける
  - Slackでも直接でも
  - レビューしてもらえる
- ソースコードが読める

## エキスパートチームとは
- 50%以上の時間を技術コミュニケーションへの貢献に充てる
- 社内に新しい技術を取り込む
- 社外のコミュニティなどを通じて社会へ貢献
- カンファレンス・勉強会の運営
- 対外的な講演活動
- 執筆・雑誌

## tenntennさんの場合のプロダクト開発との関わり方
- プロダクト開発を通した情報をコミュニティに伝える
- プロダクト開発の時間も確保する
  - 忙しいときは重点を置く
- プロダクト開発チームへの情報共有
- プロダクト開発チームメンバーの社外発表の支援
